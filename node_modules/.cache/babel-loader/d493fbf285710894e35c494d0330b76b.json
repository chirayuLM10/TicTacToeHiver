{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _Object$definePropert;\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertNode = require(\"./Node.js\").convert;\n\nvar isNode = require(\"./Node.js\").is;\n\nvar convertHTMLElement = require(\"./HTMLElement.js\").convert;\n\nvar impl = utils.implSymbol;\n\nvar Node = require(\"./Node.js\");\n\nvar GlobalEventHandlers = require(\"./GlobalEventHandlers.js\");\n\nvar NonElementParentNode = require(\"./NonElementParentNode.js\");\n\nvar ParentNode = require(\"./ParentNode.js\");\n\nvar Document =\n/*#__PURE__*/\nfunction (_Node$interface) {\n  _inherits(Document, _Node$interface);\n\n  function Document() {\n    var _this;\n\n    _classCallCheck(this, Document);\n\n    return _possibleConstructorReturn(_this, iface.setup(Object.create((this instanceof Document ? this.constructor : void 0).prototype)));\n  }\n\n  _createClass(Document, [{\n    key: \"getElementsByTagName\",\n    value: function getElementsByTagName(qualifiedName) {\n      var _this$impl;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'getElementsByTagName' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'getElementsByTagName' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl = this[impl]).getElementsByTagName.apply(_this$impl, args));\n    }\n  }, {\n    key: \"getElementsByTagNameNS\",\n    value: function getElementsByTagNameNS(namespace, localName) {\n      var _this$impl2;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\"Failed to execute 'getElementsByTagNameNS' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg === null || curArg === undefined) {\n          curArg = null;\n        } else {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'getElementsByTagNameNS' on 'Document': parameter 1\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      {\n        var _curArg = arguments[1];\n        _curArg = conversions[\"DOMString\"](_curArg, {\n          context: \"Failed to execute 'getElementsByTagNameNS' on 'Document': parameter 2\"\n        });\n        args.push(_curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl2 = this[impl]).getElementsByTagNameNS.apply(_this$impl2, args));\n    }\n  }, {\n    key: \"getElementsByClassName\",\n    value: function getElementsByClassName(classNames) {\n      var _this$impl3;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'getElementsByClassName' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'getElementsByClassName' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl3 = this[impl]).getElementsByClassName.apply(_this$impl3, args));\n    }\n  }, {\n    key: \"createElement\",\n    value: function createElement(localName) {\n      var _this$impl4;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'createElement' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'createElement' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl4 = this[impl]).createElement.apply(_this$impl4, args));\n    }\n  }, {\n    key: \"createElementNS\",\n    value: function createElementNS(namespace, qualifiedName) {\n      var _this$impl5;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\"Failed to execute 'createElementNS' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg === null || curArg === undefined) {\n          curArg = null;\n        } else {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'createElementNS' on 'Document': parameter 1\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      {\n        var _curArg2 = arguments[1];\n        _curArg2 = conversions[\"DOMString\"](_curArg2, {\n          context: \"Failed to execute 'createElementNS' on 'Document': parameter 2\"\n        });\n        args.push(_curArg2);\n      }\n      return utils.tryWrapperForImpl((_this$impl5 = this[impl]).createElementNS.apply(_this$impl5, args));\n    }\n  }, {\n    key: \"createDocumentFragment\",\n    value: function createDocumentFragment() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl].createDocumentFragment());\n    }\n  }, {\n    key: \"createTextNode\",\n    value: function createTextNode(data) {\n      var _this$impl6;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'createTextNode' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'createTextNode' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl6 = this[impl]).createTextNode.apply(_this$impl6, args));\n    }\n  }, {\n    key: \"createCDATASection\",\n    value: function createCDATASection(data) {\n      var _this$impl7;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'createCDATASection' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'createCDATASection' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl7 = this[impl]).createCDATASection.apply(_this$impl7, args));\n    }\n  }, {\n    key: \"createComment\",\n    value: function createComment(data) {\n      var _this$impl8;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'createComment' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'createComment' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl8 = this[impl]).createComment.apply(_this$impl8, args));\n    }\n  }, {\n    key: \"createProcessingInstruction\",\n    value: function createProcessingInstruction(target, data) {\n      var _this$impl9;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\"Failed to execute 'createProcessingInstruction' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'createProcessingInstruction' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg3 = arguments[1];\n        _curArg3 = conversions[\"DOMString\"](_curArg3, {\n          context: \"Failed to execute 'createProcessingInstruction' on 'Document': parameter 2\"\n        });\n        args.push(_curArg3);\n      }\n      return utils.tryWrapperForImpl((_this$impl9 = this[impl]).createProcessingInstruction.apply(_this$impl9, args));\n    }\n  }, {\n    key: \"importNode\",\n    value: function importNode(node) {\n      var _this$impl10;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'importNode' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = convertNode(curArg, {\n          context: \"Failed to execute 'importNode' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg4 = arguments[1];\n\n        if (_curArg4 !== undefined) {\n          _curArg4 = conversions[\"boolean\"](_curArg4, {\n            context: \"Failed to execute 'importNode' on 'Document': parameter 2\"\n          });\n        } else {\n          _curArg4 = false;\n        }\n\n        args.push(_curArg4);\n      }\n      return utils.tryWrapperForImpl((_this$impl10 = this[impl]).importNode.apply(_this$impl10, args));\n    }\n  }, {\n    key: \"adoptNode\",\n    value: function adoptNode(node) {\n      var _this$impl11;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'adoptNode' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = convertNode(curArg, {\n          context: \"Failed to execute 'adoptNode' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl11 = this[impl]).adoptNode.apply(_this$impl11, args));\n    }\n  }, {\n    key: \"createAttribute\",\n    value: function createAttribute(localName) {\n      var _this$impl12;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'createAttribute' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'createAttribute' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl12 = this[impl]).createAttribute.apply(_this$impl12, args));\n    }\n  }, {\n    key: \"createAttributeNS\",\n    value: function createAttributeNS(namespace, qualifiedName) {\n      var _this$impl13;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\"Failed to execute 'createAttributeNS' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg === null || curArg === undefined) {\n          curArg = null;\n        } else {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'createAttributeNS' on 'Document': parameter 1\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      {\n        var _curArg5 = arguments[1];\n        _curArg5 = conversions[\"DOMString\"](_curArg5, {\n          context: \"Failed to execute 'createAttributeNS' on 'Document': parameter 2\"\n        });\n        args.push(_curArg5);\n      }\n      return utils.tryWrapperForImpl((_this$impl13 = this[impl]).createAttributeNS.apply(_this$impl13, args));\n    }\n  }, {\n    key: \"createEvent\",\n    value: function createEvent(interface_) {\n      var _this$impl14;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'createEvent' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'createEvent' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl14 = this[impl]).createEvent.apply(_this$impl14, args));\n    }\n  }, {\n    key: \"createNodeIterator\",\n    value: function createNodeIterator(root) {\n      var _this$impl15;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'createNodeIterator' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = convertNode(curArg, {\n          context: \"Failed to execute 'createNodeIterator' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg6 = arguments[1];\n\n        if (_curArg6 !== undefined) {\n          _curArg6 = conversions[\"unsigned long\"](_curArg6, {\n            context: \"Failed to execute 'createNodeIterator' on 'Document': parameter 2\"\n          });\n        } else {\n          _curArg6 = 0xffffffff;\n        }\n\n        args.push(_curArg6);\n      }\n      {\n        var _curArg7 = arguments[2];\n\n        if (_curArg7 !== undefined) {\n          if (_curArg7 === null || _curArg7 === undefined) {\n            _curArg7 = null;\n          } else {\n            _curArg7 = utils.tryImplForWrapper(_curArg7);\n          }\n        } else {\n          _curArg7 = null;\n        }\n\n        args.push(_curArg7);\n      }\n      return utils.tryWrapperForImpl((_this$impl15 = this[impl]).createNodeIterator.apply(_this$impl15, args));\n    }\n  }, {\n    key: \"createTreeWalker\",\n    value: function createTreeWalker(root) {\n      var _this$impl16;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'createTreeWalker' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = convertNode(curArg, {\n          context: \"Failed to execute 'createTreeWalker' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg8 = arguments[1];\n\n        if (_curArg8 !== undefined) {\n          _curArg8 = conversions[\"unsigned long\"](_curArg8, {\n            context: \"Failed to execute 'createTreeWalker' on 'Document': parameter 2\"\n          });\n        } else {\n          _curArg8 = 0xffffffff;\n        }\n\n        args.push(_curArg8);\n      }\n      {\n        var _curArg9 = arguments[2];\n\n        if (_curArg9 !== undefined) {\n          if (_curArg9 === null || _curArg9 === undefined) {\n            _curArg9 = null;\n          } else {\n            _curArg9 = utils.tryImplForWrapper(_curArg9);\n          }\n        } else {\n          _curArg9 = null;\n        }\n\n        args.push(_curArg9);\n      }\n      return utils.tryWrapperForImpl((_this$impl16 = this[impl]).createTreeWalker.apply(_this$impl16, args));\n    }\n  }, {\n    key: \"getElementsByName\",\n    value: function getElementsByName(elementName) {\n      var _this$impl17;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'getElementsByName' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'getElementsByName' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl17 = this[impl]).getElementsByName.apply(_this$impl17, args));\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this$impl18;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'open' on 'Document': parameter 1\"\n          });\n        } else {\n          curArg = \"text/html\";\n        }\n\n        args.push(curArg);\n      }\n      {\n        var _curArg10 = arguments[1];\n\n        if (_curArg10 !== undefined) {\n          _curArg10 = conversions[\"DOMString\"](_curArg10, {\n            context: \"Failed to execute 'open' on 'Document': parameter 2\"\n          });\n        } else {\n          _curArg10 = \"\";\n        }\n\n        args.push(_curArg10);\n      }\n      return utils.tryWrapperForImpl((_this$impl18 = this[impl]).open.apply(_this$impl18, args));\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].close();\n    }\n  }, {\n    key: \"write\",\n    value: function write() {\n      var _this$impl19;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var args = [];\n\n      for (var i = 0; i < arguments.length; i++) {\n        var curArg = arguments[i];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'write' on 'Document': parameter \" + (i + 1)\n        });\n        args.push(curArg);\n      }\n\n      return (_this$impl19 = this[impl]).write.apply(_this$impl19, args);\n    }\n  }, {\n    key: \"writeln\",\n    value: function writeln() {\n      var _this$impl20;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var args = [];\n\n      for (var i = 0; i < arguments.length; i++) {\n        var curArg = arguments[i];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'writeln' on 'Document': parameter \" + (i + 1)\n        });\n        args.push(curArg);\n      }\n\n      return (_this$impl20 = this[impl]).writeln.apply(_this$impl20, args);\n    }\n  }, {\n    key: \"hasFocus\",\n    value: function hasFocus() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].hasFocus();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].clear();\n    }\n  }, {\n    key: \"captureEvents\",\n    value: function captureEvents() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].captureEvents();\n    }\n  }, {\n    key: \"releaseEvents\",\n    value: function releaseEvents() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].releaseEvents();\n    }\n  }, {\n    key: \"getElementById\",\n    value: function getElementById(elementId) {\n      var _this$impl21;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'getElementById' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'getElementById' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl21 = this[impl]).getElementById.apply(_this$impl21, args));\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      var _this$impl22;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var args = [];\n\n      for (var i = 0; i < arguments.length; i++) {\n        var curArg = arguments[i];\n\n        if (isNode(curArg)) {\n          curArg = utils.implForWrapper(curArg);\n        } else {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'prepend' on 'Document': parameter \" + (i + 1)\n          });\n        }\n\n        args.push(curArg);\n      }\n\n      return (_this$impl22 = this[impl]).prepend.apply(_this$impl22, args);\n    }\n  }, {\n    key: \"append\",\n    value: function append() {\n      var _this$impl23;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var args = [];\n\n      for (var i = 0; i < arguments.length; i++) {\n        var curArg = arguments[i];\n\n        if (isNode(curArg)) {\n          curArg = utils.implForWrapper(curArg);\n        } else {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'append' on 'Document': parameter \" + (i + 1)\n          });\n        }\n\n        args.push(curArg);\n      }\n\n      return (_this$impl23 = this[impl]).append.apply(_this$impl23, args);\n    }\n  }, {\n    key: \"querySelector\",\n    value: function querySelector(selectors) {\n      var _this$impl24;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'querySelector' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'querySelector' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl24 = this[impl]).querySelector.apply(_this$impl24, args));\n    }\n  }, {\n    key: \"querySelectorAll\",\n    value: function querySelectorAll(selectors) {\n      var _this$impl25;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'querySelectorAll' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'querySelectorAll' on 'Document': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl25 = this[impl]).querySelectorAll.apply(_this$impl25, args));\n    }\n  }, {\n    key: \"implementation\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"implementation\", function () {\n        return utils.tryWrapperForImpl(_this2[impl][\"implementation\"]);\n      });\n    }\n  }, {\n    key: \"URL\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"URL\"];\n    }\n  }, {\n    key: \"documentURI\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"documentURI\"];\n    }\n  }, {\n    key: \"origin\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"origin\"];\n    }\n  }, {\n    key: \"compatMode\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"compatMode\"];\n    }\n  }, {\n    key: \"characterSet\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"characterSet\"];\n    }\n  }, {\n    key: \"charset\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"charset\"];\n    }\n  }, {\n    key: \"inputEncoding\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"inputEncoding\"];\n    }\n  }, {\n    key: \"contentType\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"contentType\"];\n    }\n  }, {\n    key: \"doctype\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"doctype\"]);\n    }\n  }, {\n    key: \"documentElement\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"documentElement\"]);\n    }\n  }, {\n    key: \"referrer\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"referrer\"];\n    }\n  }, {\n    key: \"cookie\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"cookie\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'cookie' property on 'Document': The provided value\"\n      });\n      this[impl][\"cookie\"] = V;\n    }\n  }, {\n    key: \"lastModified\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"lastModified\"];\n    }\n  }, {\n    key: \"readyState\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"readyState\"]);\n    }\n  }, {\n    key: \"title\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"title\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'title' property on 'Document': The provided value\"\n      });\n      this[impl][\"title\"] = V;\n    }\n  }, {\n    key: \"dir\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"dir\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'dir' property on 'Document': The provided value\"\n      });\n      this[impl][\"dir\"] = V;\n    }\n  }, {\n    key: \"body\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"body\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (V === null || V === undefined) {\n        V = null;\n      } else {\n        V = convertHTMLElement(V, {\n          context: \"Failed to set the 'body' property on 'Document': The provided value\"\n        });\n      }\n\n      this[impl][\"body\"] = V;\n    }\n  }, {\n    key: \"head\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"head\"]);\n    }\n  }, {\n    key: \"images\",\n    get: function get() {\n      var _this3 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"images\", function () {\n        return utils.tryWrapperForImpl(_this3[impl][\"images\"]);\n      });\n    }\n  }, {\n    key: \"embeds\",\n    get: function get() {\n      var _this4 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"embeds\", function () {\n        return utils.tryWrapperForImpl(_this4[impl][\"embeds\"]);\n      });\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      var _this5 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"plugins\", function () {\n        return utils.tryWrapperForImpl(_this5[impl][\"plugins\"]);\n      });\n    }\n  }, {\n    key: \"links\",\n    get: function get() {\n      var _this6 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"links\", function () {\n        return utils.tryWrapperForImpl(_this6[impl][\"links\"]);\n      });\n    }\n  }, {\n    key: \"forms\",\n    get: function get() {\n      var _this7 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"forms\", function () {\n        return utils.tryWrapperForImpl(_this7[impl][\"forms\"]);\n      });\n    }\n  }, {\n    key: \"scripts\",\n    get: function get() {\n      var _this8 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"scripts\", function () {\n        return utils.tryWrapperForImpl(_this8[impl][\"scripts\"]);\n      });\n    }\n  }, {\n    key: \"currentScript\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"currentScript\"]);\n    }\n  }, {\n    key: \"defaultView\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"defaultView\"]);\n    }\n  }, {\n    key: \"activeElement\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"activeElement\"]);\n    }\n  }, {\n    key: \"onreadystatechange\",\n    get: function get() {\n      return utils.tryWrapperForImpl(this[impl][\"onreadystatechange\"]);\n    },\n    set: function set(V) {\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onreadystatechange\"] = V;\n    }\n  }, {\n    key: \"anchors\",\n    get: function get() {\n      var _this9 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"anchors\", function () {\n        return utils.tryWrapperForImpl(_this9[impl][\"anchors\"]);\n      });\n    }\n  }, {\n    key: \"applets\",\n    get: function get() {\n      var _this10 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"applets\", function () {\n        return utils.tryWrapperForImpl(_this10[impl][\"applets\"]);\n      });\n    }\n  }, {\n    key: \"styleSheets\",\n    get: function get() {\n      var _this11 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"styleSheets\", function () {\n        return utils.tryWrapperForImpl(_this11[impl][\"styleSheets\"]);\n      });\n    }\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"hidden\"];\n    }\n  }, {\n    key: \"visibilityState\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"visibilityState\"]);\n    }\n  }, {\n    key: \"onvisibilitychange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onvisibilitychange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onvisibilitychange\"] = V;\n    }\n  }, {\n    key: \"onabort\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onabort\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onabort\"] = V;\n    }\n  }, {\n    key: \"onauxclick\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onauxclick\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onauxclick\"] = V;\n    }\n  }, {\n    key: \"onblur\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onblur\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onblur\"] = V;\n    }\n  }, {\n    key: \"oncancel\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oncancel\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oncancel\"] = V;\n    }\n  }, {\n    key: \"oncanplay\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oncanplay\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oncanplay\"] = V;\n    }\n  }, {\n    key: \"oncanplaythrough\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oncanplaythrough\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oncanplaythrough\"] = V;\n    }\n  }, {\n    key: \"onchange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onchange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onchange\"] = V;\n    }\n  }, {\n    key: \"onclick\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onclick\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onclick\"] = V;\n    }\n  }, {\n    key: \"onclose\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onclose\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onclose\"] = V;\n    }\n  }, {\n    key: \"oncontextmenu\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oncontextmenu\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oncontextmenu\"] = V;\n    }\n  }, {\n    key: \"oncuechange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oncuechange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oncuechange\"] = V;\n    }\n  }, {\n    key: \"ondblclick\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondblclick\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondblclick\"] = V;\n    }\n  }, {\n    key: \"ondrag\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondrag\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondrag\"] = V;\n    }\n  }, {\n    key: \"ondragend\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragend\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragend\"] = V;\n    }\n  }, {\n    key: \"ondragenter\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragenter\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragenter\"] = V;\n    }\n  }, {\n    key: \"ondragexit\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragexit\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragexit\"] = V;\n    }\n  }, {\n    key: \"ondragleave\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragleave\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragleave\"] = V;\n    }\n  }, {\n    key: \"ondragover\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragover\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragover\"] = V;\n    }\n  }, {\n    key: \"ondragstart\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragstart\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragstart\"] = V;\n    }\n  }, {\n    key: \"ondrop\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondrop\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondrop\"] = V;\n    }\n  }, {\n    key: \"ondurationchange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondurationchange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondurationchange\"] = V;\n    }\n  }, {\n    key: \"onemptied\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onemptied\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onemptied\"] = V;\n    }\n  }, {\n    key: \"onended\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onended\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onended\"] = V;\n    }\n  }, {\n    key: \"onerror\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onerror\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onerror\"] = V;\n    }\n  }, {\n    key: \"onfocus\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onfocus\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onfocus\"] = V;\n    }\n  }, {\n    key: \"oninput\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oninput\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oninput\"] = V;\n    }\n  }, {\n    key: \"oninvalid\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oninvalid\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oninvalid\"] = V;\n    }\n  }, {\n    key: \"onkeydown\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onkeydown\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onkeydown\"] = V;\n    }\n  }, {\n    key: \"onkeypress\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onkeypress\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onkeypress\"] = V;\n    }\n  }, {\n    key: \"onkeyup\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onkeyup\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onkeyup\"] = V;\n    }\n  }, {\n    key: \"onload\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onload\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onload\"] = V;\n    }\n  }, {\n    key: \"onloadeddata\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onloadeddata\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onloadeddata\"] = V;\n    }\n  }, {\n    key: \"onloadedmetadata\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onloadedmetadata\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onloadedmetadata\"] = V;\n    }\n  }, {\n    key: \"onloadend\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onloadend\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onloadend\"] = V;\n    }\n  }, {\n    key: \"onloadstart\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onloadstart\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onloadstart\"] = V;\n    }\n  }, {\n    key: \"onmousedown\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmousedown\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmousedown\"] = V;\n    }\n  }, {\n    key: \"onmouseenter\",\n    get: function get() {\n      return utils.tryWrapperForImpl(this[impl][\"onmouseenter\"]);\n    },\n    set: function set(V) {\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmouseenter\"] = V;\n    }\n  }, {\n    key: \"onmouseleave\",\n    get: function get() {\n      return utils.tryWrapperForImpl(this[impl][\"onmouseleave\"]);\n    },\n    set: function set(V) {\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmouseleave\"] = V;\n    }\n  }, {\n    key: \"onmousemove\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmousemove\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmousemove\"] = V;\n    }\n  }, {\n    key: \"onmouseout\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmouseout\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmouseout\"] = V;\n    }\n  }, {\n    key: \"onmouseover\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmouseover\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmouseover\"] = V;\n    }\n  }, {\n    key: \"onmouseup\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmouseup\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmouseup\"] = V;\n    }\n  }, {\n    key: \"onwheel\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onwheel\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onwheel\"] = V;\n    }\n  }, {\n    key: \"onpause\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onpause\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onpause\"] = V;\n    }\n  }, {\n    key: \"onplay\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onplay\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onplay\"] = V;\n    }\n  }, {\n    key: \"onplaying\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onplaying\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onplaying\"] = V;\n    }\n  }, {\n    key: \"onprogress\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onprogress\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onprogress\"] = V;\n    }\n  }, {\n    key: \"onratechange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onratechange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onratechange\"] = V;\n    }\n  }, {\n    key: \"onreset\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onreset\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onreset\"] = V;\n    }\n  }, {\n    key: \"onresize\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onresize\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onresize\"] = V;\n    }\n  }, {\n    key: \"onscroll\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onscroll\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onscroll\"] = V;\n    }\n  }, {\n    key: \"onsecuritypolicyviolation\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onsecuritypolicyviolation\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onsecuritypolicyviolation\"] = V;\n    }\n  }, {\n    key: \"onseeked\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onseeked\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onseeked\"] = V;\n    }\n  }, {\n    key: \"onseeking\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onseeking\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onseeking\"] = V;\n    }\n  }, {\n    key: \"onselect\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onselect\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onselect\"] = V;\n    }\n  }, {\n    key: \"onstalled\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onstalled\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onstalled\"] = V;\n    }\n  }, {\n    key: \"onsubmit\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onsubmit\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onsubmit\"] = V;\n    }\n  }, {\n    key: \"onsuspend\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onsuspend\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onsuspend\"] = V;\n    }\n  }, {\n    key: \"ontimeupdate\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ontimeupdate\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ontimeupdate\"] = V;\n    }\n  }, {\n    key: \"ontoggle\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ontoggle\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ontoggle\"] = V;\n    }\n  }, {\n    key: \"onvolumechange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onvolumechange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onvolumechange\"] = V;\n    }\n  }, {\n    key: \"onwaiting\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onwaiting\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onwaiting\"] = V;\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      var _this12 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"children\", function () {\n        return utils.tryWrapperForImpl(_this12[impl][\"children\"]);\n      });\n    }\n  }, {\n    key: \"firstElementChild\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"firstElementChild\"]);\n    }\n  }, {\n    key: \"lastElementChild\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"lastElementChild\"]);\n    }\n  }, {\n    key: \"childElementCount\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"childElementCount\"];\n    }\n  }]);\n\n  return Document;\n}(Node.interface);\n\nObject.defineProperties(Document.prototype, (_Object$definePropert = {\n  getElementsByTagName: {\n    enumerable: true\n  },\n  getElementsByTagNameNS: {\n    enumerable: true\n  },\n  getElementsByClassName: {\n    enumerable: true\n  },\n  createElement: {\n    enumerable: true\n  },\n  createElementNS: {\n    enumerable: true\n  },\n  createDocumentFragment: {\n    enumerable: true\n  },\n  createTextNode: {\n    enumerable: true\n  },\n  createCDATASection: {\n    enumerable: true\n  },\n  createComment: {\n    enumerable: true\n  },\n  createProcessingInstruction: {\n    enumerable: true\n  },\n  importNode: {\n    enumerable: true\n  },\n  adoptNode: {\n    enumerable: true\n  },\n  createAttribute: {\n    enumerable: true\n  },\n  createAttributeNS: {\n    enumerable: true\n  },\n  createEvent: {\n    enumerable: true\n  },\n  createNodeIterator: {\n    enumerable: true\n  },\n  createTreeWalker: {\n    enumerable: true\n  },\n  getElementsByName: {\n    enumerable: true\n  },\n  open: {\n    enumerable: true\n  },\n  close: {\n    enumerable: true\n  },\n  write: {\n    enumerable: true\n  },\n  writeln: {\n    enumerable: true\n  },\n  hasFocus: {\n    enumerable: true\n  },\n  clear: {\n    enumerable: true\n  },\n  captureEvents: {\n    enumerable: true\n  },\n  releaseEvents: {\n    enumerable: true\n  },\n  getElementById: {\n    enumerable: true\n  },\n  prepend: {\n    enumerable: true\n  },\n  append: {\n    enumerable: true\n  },\n  querySelector: {\n    enumerable: true\n  },\n  querySelectorAll: {\n    enumerable: true\n  },\n  implementation: {\n    enumerable: true\n  },\n  URL: {\n    enumerable: true\n  },\n  documentURI: {\n    enumerable: true\n  },\n  origin: {\n    enumerable: true\n  },\n  compatMode: {\n    enumerable: true\n  },\n  characterSet: {\n    enumerable: true\n  },\n  charset: {\n    enumerable: true\n  },\n  inputEncoding: {\n    enumerable: true\n  },\n  contentType: {\n    enumerable: true\n  },\n  doctype: {\n    enumerable: true\n  },\n  documentElement: {\n    enumerable: true\n  },\n  referrer: {\n    enumerable: true\n  },\n  cookie: {\n    enumerable: true\n  },\n  lastModified: {\n    enumerable: true\n  },\n  readyState: {\n    enumerable: true\n  },\n  title: {\n    enumerable: true\n  },\n  dir: {\n    enumerable: true\n  },\n  body: {\n    enumerable: true\n  },\n  head: {\n    enumerable: true\n  },\n  images: {\n    enumerable: true\n  },\n  embeds: {\n    enumerable: true\n  },\n  plugins: {\n    enumerable: true\n  },\n  links: {\n    enumerable: true\n  },\n  forms: {\n    enumerable: true\n  },\n  scripts: {\n    enumerable: true\n  },\n  currentScript: {\n    enumerable: true\n  },\n  defaultView: {\n    enumerable: true\n  },\n  activeElement: {\n    enumerable: true\n  },\n  onreadystatechange: {\n    enumerable: true\n  },\n  anchors: {\n    enumerable: true\n  },\n  applets: {\n    enumerable: true\n  },\n  styleSheets: {\n    enumerable: true\n  },\n  hidden: {\n    enumerable: true\n  },\n  visibilityState: {\n    enumerable: true\n  },\n  onvisibilitychange: {\n    enumerable: true\n  },\n  onabort: {\n    enumerable: true\n  },\n  onauxclick: {\n    enumerable: true\n  },\n  onblur: {\n    enumerable: true\n  },\n  oncancel: {\n    enumerable: true\n  },\n  oncanplay: {\n    enumerable: true\n  },\n  oncanplaythrough: {\n    enumerable: true\n  },\n  onchange: {\n    enumerable: true\n  },\n  onclick: {\n    enumerable: true\n  },\n  onclose: {\n    enumerable: true\n  },\n  oncontextmenu: {\n    enumerable: true\n  },\n  oncuechange: {\n    enumerable: true\n  },\n  ondblclick: {\n    enumerable: true\n  },\n  ondrag: {\n    enumerable: true\n  },\n  ondragend: {\n    enumerable: true\n  },\n  ondragenter: {\n    enumerable: true\n  },\n  ondragexit: {\n    enumerable: true\n  },\n  ondragleave: {\n    enumerable: true\n  },\n  ondragover: {\n    enumerable: true\n  },\n  ondragstart: {\n    enumerable: true\n  },\n  ondrop: {\n    enumerable: true\n  },\n  ondurationchange: {\n    enumerable: true\n  },\n  onemptied: {\n    enumerable: true\n  },\n  onended: {\n    enumerable: true\n  },\n  onerror: {\n    enumerable: true\n  },\n  onfocus: {\n    enumerable: true\n  },\n  oninput: {\n    enumerable: true\n  },\n  oninvalid: {\n    enumerable: true\n  },\n  onkeydown: {\n    enumerable: true\n  },\n  onkeypress: {\n    enumerable: true\n  },\n  onkeyup: {\n    enumerable: true\n  },\n  onload: {\n    enumerable: true\n  },\n  onloadeddata: {\n    enumerable: true\n  },\n  onloadedmetadata: {\n    enumerable: true\n  },\n  onloadend: {\n    enumerable: true\n  },\n  onloadstart: {\n    enumerable: true\n  },\n  onmousedown: {\n    enumerable: true\n  },\n  onmouseenter: {\n    enumerable: true\n  },\n  onmouseleave: {\n    enumerable: true\n  },\n  onmousemove: {\n    enumerable: true\n  },\n  onmouseout: {\n    enumerable: true\n  },\n  onmouseover: {\n    enumerable: true\n  },\n  onmouseup: {\n    enumerable: true\n  },\n  onwheel: {\n    enumerable: true\n  },\n  onpause: {\n    enumerable: true\n  },\n  onplay: {\n    enumerable: true\n  },\n  onplaying: {\n    enumerable: true\n  },\n  onprogress: {\n    enumerable: true\n  },\n  onratechange: {\n    enumerable: true\n  },\n  onreset: {\n    enumerable: true\n  },\n  onresize: {\n    enumerable: true\n  },\n  onscroll: {\n    enumerable: true\n  },\n  onsecuritypolicyviolation: {\n    enumerable: true\n  },\n  onseeked: {\n    enumerable: true\n  },\n  onseeking: {\n    enumerable: true\n  },\n  onselect: {\n    enumerable: true\n  },\n  onstalled: {\n    enumerable: true\n  },\n  onsubmit: {\n    enumerable: true\n  },\n  onsuspend: {\n    enumerable: true\n  },\n  ontimeupdate: {\n    enumerable: true\n  },\n  ontoggle: {\n    enumerable: true\n  },\n  onvolumechange: {\n    enumerable: true\n  },\n  onwaiting: {\n    enumerable: true\n  },\n  children: {\n    enumerable: true\n  },\n  firstElementChild: {\n    enumerable: true\n  },\n  lastElementChild: {\n    enumerable: true\n  },\n  childElementCount: {\n    enumerable: true\n  }\n}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n  value: \"Document\",\n  configurable: true\n}), _defineProperty(_Object$definePropert, Symbol.unscopables, {\n  value: {\n    prepend: true,\n    append: true\n  },\n  configurable: true\n}), _Object$definePropert));\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Document'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(Document.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(Document.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    Node._internalSetup(obj);\n\n    Object.defineProperties(obj, utils.getOwnPropertyDescriptors({\n      get location() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(obj[impl][\"location\"]);\n      },\n\n      set location(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        this.location.href = V;\n      }\n\n    }));\n    Object.defineProperties(obj, {\n      location: {\n        configurable: false\n      }\n    });\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: Document,\n  expose: {\n    Window: {\n      Document: Document\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nGlobalEventHandlers._mixedIntoPredicates.push(module.exports.is);\n\nNonElementParentNode._mixedIntoPredicates.push(module.exports.is);\n\nParentNode._mixedIntoPredicates.push(module.exports.is);\n\nvar Impl = require(\"../nodes/Document-impl.js\");","map":null,"metadata":{},"sourceType":"script"}