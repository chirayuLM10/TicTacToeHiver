{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar impl = utils.implSymbol;\n\nvar SVGGraphicsElement = require(\"./SVGGraphicsElement.js\");\n\nvar WindowEventHandlers = require(\"./WindowEventHandlers.js\");\n\nvar SVGSVGElement =\n/*#__PURE__*/\nfunction (_SVGGraphicsElement$i) {\n  _inherits(SVGSVGElement, _SVGGraphicsElement$i);\n\n  function SVGSVGElement() {\n    var _this;\n\n    _classCallCheck(this, SVGSVGElement);\n\n    throw new TypeError(\"Illegal constructor\");\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(SVGSVGElement, [{\n    key: \"createSVGNumber\",\n    value: function createSVGNumber() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl].createSVGNumber());\n    }\n  }, {\n    key: \"getElementById\",\n    value: function getElementById(elementId) {\n      var _this$impl;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'getElementById' on 'SVGSVGElement': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'getElementById' on 'SVGSVGElement': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl = this[impl]).getElementById.apply(_this$impl, args));\n    }\n  }, {\n    key: \"suspendRedraw\",\n    value: function suspendRedraw(maxWaitMilliseconds) {\n      var _this$impl2;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'suspendRedraw' on 'SVGSVGElement': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'suspendRedraw' on 'SVGSVGElement': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return (_this$impl2 = this[impl]).suspendRedraw.apply(_this$impl2, args);\n    }\n  }, {\n    key: \"unsuspendRedraw\",\n    value: function unsuspendRedraw(suspendHandleID) {\n      var _this$impl3;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'unsuspendRedraw' on 'SVGSVGElement': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'unsuspendRedraw' on 'SVGSVGElement': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return (_this$impl3 = this[impl]).unsuspendRedraw.apply(_this$impl3, args);\n    }\n  }, {\n    key: \"unsuspendRedrawAll\",\n    value: function unsuspendRedrawAll() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].unsuspendRedrawAll();\n    }\n  }, {\n    key: \"forceRedraw\",\n    value: function forceRedraw() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].forceRedraw();\n    }\n  }, {\n    key: \"onafterprint\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onafterprint\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onafterprint\"] = V;\n    }\n  }, {\n    key: \"onbeforeprint\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onbeforeprint\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onbeforeprint\"] = V;\n    }\n  }, {\n    key: \"onbeforeunload\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onbeforeunload\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onbeforeunload\"] = V;\n    }\n  }, {\n    key: \"onhashchange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onhashchange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onhashchange\"] = V;\n    }\n  }, {\n    key: \"onlanguagechange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onlanguagechange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onlanguagechange\"] = V;\n    }\n  }, {\n    key: \"onmessage\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmessage\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmessage\"] = V;\n    }\n  }, {\n    key: \"onmessageerror\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmessageerror\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmessageerror\"] = V;\n    }\n  }, {\n    key: \"onoffline\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onoffline\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onoffline\"] = V;\n    }\n  }, {\n    key: \"ononline\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ononline\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ononline\"] = V;\n    }\n  }, {\n    key: \"onpagehide\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onpagehide\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onpagehide\"] = V;\n    }\n  }, {\n    key: \"onpageshow\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onpageshow\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onpageshow\"] = V;\n    }\n  }, {\n    key: \"onpopstate\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onpopstate\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onpopstate\"] = V;\n    }\n  }, {\n    key: \"onrejectionhandled\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onrejectionhandled\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onrejectionhandled\"] = V;\n    }\n  }, {\n    key: \"onstorage\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onstorage\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onstorage\"] = V;\n    }\n  }, {\n    key: \"onunhandledrejection\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onunhandledrejection\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onunhandledrejection\"] = V;\n    }\n  }, {\n    key: \"onunload\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onunload\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onunload\"] = V;\n    }\n  }]);\n\n  return SVGSVGElement;\n}(SVGGraphicsElement.interface);\n\nObject.defineProperties(SVGSVGElement.prototype, _defineProperty({\n  createSVGNumber: {\n    enumerable: true\n  },\n  getElementById: {\n    enumerable: true\n  },\n  suspendRedraw: {\n    enumerable: true\n  },\n  unsuspendRedraw: {\n    enumerable: true\n  },\n  unsuspendRedrawAll: {\n    enumerable: true\n  },\n  forceRedraw: {\n    enumerable: true\n  },\n  onafterprint: {\n    enumerable: true\n  },\n  onbeforeprint: {\n    enumerable: true\n  },\n  onbeforeunload: {\n    enumerable: true\n  },\n  onhashchange: {\n    enumerable: true\n  },\n  onlanguagechange: {\n    enumerable: true\n  },\n  onmessage: {\n    enumerable: true\n  },\n  onmessageerror: {\n    enumerable: true\n  },\n  onoffline: {\n    enumerable: true\n  },\n  ononline: {\n    enumerable: true\n  },\n  onpagehide: {\n    enumerable: true\n  },\n  onpageshow: {\n    enumerable: true\n  },\n  onpopstate: {\n    enumerable: true\n  },\n  onrejectionhandled: {\n    enumerable: true\n  },\n  onstorage: {\n    enumerable: true\n  },\n  onunhandledrejection: {\n    enumerable: true\n  },\n  onunload: {\n    enumerable: true\n  }\n}, Symbol.toStringTag, {\n  value: \"SVGSVGElement\",\n  configurable: true\n}));\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'SVGSVGElement'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(SVGSVGElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(SVGSVGElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    SVGGraphicsElement._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: SVGSVGElement,\n  expose: {\n    Window: {\n      SVGSVGElement: SVGSVGElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nWindowEventHandlers._mixedIntoPredicates.push(module.exports.is);\n\nvar Impl = require(\"../nodes/SVGSVGElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}