{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar impl = utils.implSymbol;\n\nvar HTMLElement = require(\"./HTMLElement.js\");\n\nvar LinkStyle = require(\"./LinkStyle.js\");\n\nvar HTMLLinkElement =\n/*#__PURE__*/\nfunction (_HTMLElement$interfac) {\n  _inherits(HTMLLinkElement, _HTMLElement$interfac);\n\n  function HTMLLinkElement() {\n    var _this;\n\n    _classCallCheck(this, HTMLLinkElement);\n\n    throw new TypeError(\"Illegal constructor\");\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(HTMLLinkElement, [{\n    key: \"href\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"href\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'href' property on 'HTMLLinkElement': The provided value\"\n      });\n      this[impl][\"href\"] = V;\n    }\n  }, {\n    key: \"crossOrigin\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"crossOrigin\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (V === null || V === undefined) {\n        V = null;\n      } else {\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'crossOrigin' property on 'HTMLLinkElement': The provided value\"\n        });\n      }\n\n      this.setAttribute(\"crossOrigin\", V);\n    }\n  }, {\n    key: \"rel\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"rel\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'rel' property on 'HTMLLinkElement': The provided value\"\n      });\n      this.setAttribute(\"rel\", V);\n    }\n  }, {\n    key: \"relList\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"relList\", function () {\n        return utils.tryWrapperForImpl(_this2[impl][\"relList\"]);\n      });\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      this.relList.value = V;\n    }\n  }, {\n    key: \"media\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"media\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'media' property on 'HTMLLinkElement': The provided value\"\n      });\n      this.setAttribute(\"media\", V);\n    }\n  }, {\n    key: \"hreflang\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"hreflang\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'hreflang' property on 'HTMLLinkElement': The provided value\"\n      });\n      this.setAttribute(\"hreflang\", V);\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"type\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'type' property on 'HTMLLinkElement': The provided value\"\n      });\n      this.setAttribute(\"type\", V);\n    }\n  }, {\n    key: \"charset\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"charset\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'charset' property on 'HTMLLinkElement': The provided value\"\n      });\n      this.setAttribute(\"charset\", V);\n    }\n  }, {\n    key: \"rev\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"rev\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'rev' property on 'HTMLLinkElement': The provided value\"\n      });\n      this.setAttribute(\"rev\", V);\n    }\n  }, {\n    key: \"target\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"target\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'target' property on 'HTMLLinkElement': The provided value\"\n      });\n      this.setAttribute(\"target\", V);\n    }\n  }, {\n    key: \"sheet\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"sheet\"]);\n    }\n  }]);\n\n  return HTMLLinkElement;\n}(HTMLElement.interface);\n\nObject.defineProperties(HTMLLinkElement.prototype, _defineProperty({\n  href: {\n    enumerable: true\n  },\n  crossOrigin: {\n    enumerable: true\n  },\n  rel: {\n    enumerable: true\n  },\n  relList: {\n    enumerable: true\n  },\n  media: {\n    enumerable: true\n  },\n  hreflang: {\n    enumerable: true\n  },\n  type: {\n    enumerable: true\n  },\n  charset: {\n    enumerable: true\n  },\n  rev: {\n    enumerable: true\n  },\n  target: {\n    enumerable: true\n  },\n  sheet: {\n    enumerable: true\n  }\n}, Symbol.toStringTag, {\n  value: \"HTMLLinkElement\",\n  configurable: true\n}));\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLLinkElement'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(HTMLLinkElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(HTMLLinkElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: HTMLLinkElement,\n  expose: {\n    Window: {\n      HTMLLinkElement: HTMLLinkElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nLinkStyle._mixedIntoPredicates.push(module.exports.is);\n\nvar Impl = require(\"../nodes/HTMLLinkElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}