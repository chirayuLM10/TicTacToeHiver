{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar MIMEType = require(\"whatwg-mimetype\");\n\nvar whatwgEncoding = require(\"whatwg-encoding\");\n\nvar _require = require(\"whatwg-url\"),\n    parseURL = _require.parseURL,\n    serializeURL = _require.serializeURL;\n\nvar sniffHTMLEncoding = require(\"html-encoding-sniffer\");\n\nvar _require2 = require(\"../window/navigation\"),\n    evaluateJavaScriptURL = _require2.evaluateJavaScriptURL;\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require3 = require(\"../../utils\"),\n    reflectURLAttribute = _require3.reflectURLAttribute;\n\nvar _require4 = require(\"../helpers/document-base-url\"),\n    documentBaseURL = _require4.documentBaseURL;\n\nvar _require5 = require(\"../helpers/events\"),\n    fireAnEvent = _require5.fireAnEvent;\n\nvar _require6 = require(\"../attributes\"),\n    getAttributeValue = _require6.getAttributeValue;\n\nvar idlUtils = require(\"../generated/utils\");\n\nfunction fireLoadEvent(document, frame, attaching) {\n  if (attaching) {\n    fireAnEvent(\"load\", frame);\n    return;\n  }\n\n  var dummyPromise = Promise.resolve();\n\n  function onLoad() {\n    fireAnEvent(\"load\", frame);\n  }\n\n  document._queue.push(dummyPromise, onLoad);\n}\n\nfunction fetchFrame(serializedURL, frame, document, contentDoc) {\n  var resourceLoader = document._resourceLoader;\n  var request;\n\n  function onFrameLoaded(data) {\n    var sniffOptions = {\n      defaultEncoding: document._encoding\n    };\n\n    if (request.response) {\n      var contentType = MIMEType.parse(request.response.headers[\"content-type\"]) || new MIMEType(\"text/plain\");\n      sniffOptions.transportLayerEncodingLabel = contentType.parameters.get(\"charset\");\n\n      if (contentType) {\n        if (contentType.isXML()) {\n          contentDoc._parsingMode = \"xml\";\n        }\n\n        contentDoc.contentType = contentType.essence;\n      }\n    }\n\n    var encoding = sniffHTMLEncoding(data, sniffOptions);\n    contentDoc._encoding = encoding;\n    var html = whatwgEncoding.decode(data, contentDoc._encoding);\n\n    contentDoc._htmlToDom.appendToDocument(html, contentDoc);\n\n    contentDoc.close();\n    return new Promise(function (resolve, reject) {\n      contentDoc.addEventListener(\"load\", resolve);\n      contentDoc.addEventListener(\"error\", reject);\n    });\n  }\n\n  request = resourceLoader.fetch(serializedURL, {\n    element: frame,\n    onLoad: onFrameLoaded\n  });\n}\n\nfunction canDispatchEvents(frame, attaching) {\n  if (!attaching) {\n    return false;\n  }\n\n  return Object.keys(frame._eventListeners).length === 0;\n}\n\nfunction loadFrame(frame, attaching) {\n  if (frame._contentDocument) {\n    if (frame._contentDocument._defaultView) {\n      // close calls delete on its document.\n      frame._contentDocument._defaultView.close();\n    } else {\n      delete frame._contentDocument;\n    }\n  }\n\n  var parentDoc = frame._ownerDocument; // https://html.spec.whatwg.org/#process-the-iframe-attributes\n\n  var url;\n  var srcAttribute = getAttributeValue(frame, \"src\");\n\n  if (srcAttribute === \"\") {\n    url = parseURL(\"about:blank\");\n  } else {\n    url = parseURL(srcAttribute, {\n      baseURL: documentBaseURL(parentDoc) || undefined\n    }) || parseURL(\"about:blank\");\n  }\n\n  var serializedURL = serializeURL(url); // This is not great, but prevents a require cycle during webidl2js generation\n\n  var wnd = new parentDoc._defaultView.constructor({\n    parsingMode: \"html\",\n    url: url.scheme === \"javascript\" || serializedURL === \"about:blank\" ? parentDoc.URL : serializedURL,\n    resourceLoader: parentDoc._defaultView._resourceLoader,\n    referrer: parentDoc.URL,\n    cookieJar: parentDoc._cookieJar,\n    pool: parentDoc._pool,\n    encoding: parentDoc._encoding,\n    runScripts: parentDoc._defaultView._runScripts,\n    commonForOrigin: parentDoc._defaultView._commonForOrigin\n  });\n  var contentDoc = frame._contentDocument = idlUtils.implForWrapper(wnd._document);\n  var parent = parentDoc._defaultView;\n  var contentWindow = contentDoc._defaultView;\n  contentWindow._parent = parent;\n  contentWindow._top = parent.top;\n  contentWindow._frameElement = frame;\n  contentWindow._virtualConsole = parent._virtualConsole;\n\n  if (parentDoc.origin === contentDoc.origin) {\n    contentWindow._currentOriginData.windowsInSameOrigin.push(contentWindow);\n  }\n\n  var noQueue = canDispatchEvents(frame, attaching); // Handle about:blank with a simulated load of an empty document.\n\n  if (serializedURL === \"about:blank\") {\n    // Cannot be done inside the enqueued callback; the documentElement etc. need to be immediately available.\n    contentDoc._htmlToDom.appendToDocument(\"<html><head></head><body></body></html>\", contentDoc);\n\n    contentDoc.close(noQueue);\n\n    if (noQueue) {\n      fireLoadEvent(parentDoc, frame, noQueue);\n    } else {\n      contentDoc.addEventListener(\"load\", function () {\n        fireLoadEvent(parentDoc, frame);\n      });\n    }\n  } else if (url.scheme === \"javascript\") {\n    // Cannot be done inside the enqueued callback; the documentElement etc. need to be immediately available.\n    contentDoc._htmlToDom.appendToDocument(\"<html><head></head><body></body></html>\", contentDoc);\n\n    contentDoc.close(noQueue);\n    var result = evaluateJavaScriptURL(contentWindow, url);\n\n    if (typeof result === \"string\") {\n      contentDoc.body.textContent = result;\n    }\n\n    if (noQueue) {\n      fireLoadEvent(parentDoc, frame, noQueue);\n    } else {\n      contentDoc.addEventListener(\"load\", function () {\n        fireLoadEvent(parentDoc, frame);\n      });\n    }\n  } else {\n    fetchFrame(serializedURL, frame, parentDoc, contentDoc);\n  }\n}\n\nfunction refreshAccessors(document) {\n  var window = document._defaultView;\n\n  if (!window) {\n    return;\n  }\n\n  var frames = document.querySelectorAll(\"iframe,frame\"); // delete accessors for all frames\n\n  for (var i = 0; i < window._length; ++i) {\n    delete window[i];\n  }\n\n  window._length = frames.length;\n  Array.prototype.forEach.call(frames, function (frame, i) {\n    Object.defineProperty(window, i, {\n      configurable: true,\n      enumerable: true,\n      get: function get() {\n        return frame.contentWindow;\n      }\n    });\n  });\n}\n\nvar HTMLFrameElementImpl =\n/*#__PURE__*/\nfunction (_HTMLElementImpl) {\n  _inherits(HTMLFrameElementImpl, _HTMLElementImpl);\n\n  function HTMLFrameElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLFrameElementImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLFrameElementImpl).call(this, args, privateData));\n    _this._contentDocument = null;\n    return _this;\n  }\n\n  _createClass(HTMLFrameElementImpl, [{\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldVal) {\n      _get(_getPrototypeOf(HTMLFrameElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldVal);\n\n      if (name === \"src\") {\n        // iframe should never load in a document without a Window\n        // (e.g. implementation.createHTMLDocument)\n        if (this._attached && this._ownerDocument._defaultView) {\n          loadFrame(this);\n        }\n      }\n    }\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      _get(_getPrototypeOf(HTMLFrameElementImpl.prototype), \"_detach\", this).call(this);\n\n      if (this.contentWindow) {\n        this.contentWindow.close();\n      }\n\n      refreshAccessors(this._ownerDocument);\n    }\n  }, {\n    key: \"_attach\",\n    value: function _attach() {\n      _get(_getPrototypeOf(HTMLFrameElementImpl.prototype), \"_attach\", this).call(this);\n\n      if (this._ownerDocument._defaultView) {\n        loadFrame(this, true);\n      }\n\n      refreshAccessors(this._ownerDocument);\n    }\n  }, {\n    key: \"contentDocument\",\n    get: function get() {\n      return this._contentDocument;\n    }\n  }, {\n    key: \"contentWindow\",\n    get: function get() {\n      return this.contentDocument ? this.contentDocument._defaultView : null;\n    }\n  }, {\n    key: \"src\",\n    get: function get() {\n      return reflectURLAttribute(this, \"src\");\n    },\n    set: function set(value) {\n      this.setAttribute(\"src\", value);\n    }\n  }, {\n    key: \"longDesc\",\n    get: function get() {\n      return reflectURLAttribute(this, \"longdesc\");\n    },\n    set: function set(value) {\n      this.setAttribute(\"longdesc\", value);\n    }\n  }]);\n\n  return HTMLFrameElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLFrameElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}