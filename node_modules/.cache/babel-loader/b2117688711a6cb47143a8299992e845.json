{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertHTMLTableCaptionElement = require(\"./HTMLTableCaptionElement.js\").convert;\n\nvar convertHTMLTableSectionElement = require(\"./HTMLTableSectionElement.js\").convert;\n\nvar impl = utils.implSymbol;\n\nvar HTMLElement = require(\"./HTMLElement.js\");\n\nvar HTMLTableElement =\n/*#__PURE__*/\nfunction (_HTMLElement$interfac) {\n  _inherits(HTMLTableElement, _HTMLElement$interfac);\n\n  function HTMLTableElement() {\n    var _this;\n\n    _classCallCheck(this, HTMLTableElement);\n\n    throw new TypeError(\"Illegal constructor\");\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(HTMLTableElement, [{\n    key: \"createCaption\",\n    value: function createCaption() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl].createCaption());\n    }\n  }, {\n    key: \"deleteCaption\",\n    value: function deleteCaption() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].deleteCaption();\n    }\n  }, {\n    key: \"createTHead\",\n    value: function createTHead() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl].createTHead());\n    }\n  }, {\n    key: \"deleteTHead\",\n    value: function deleteTHead() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].deleteTHead();\n    }\n  }, {\n    key: \"createTFoot\",\n    value: function createTFoot() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl].createTFoot());\n    }\n  }, {\n    key: \"deleteTFoot\",\n    value: function deleteTFoot() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].deleteTFoot();\n    }\n  }, {\n    key: \"createTBody\",\n    value: function createTBody() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl].createTBody());\n    }\n  }, {\n    key: \"insertRow\",\n    value: function insertRow() {\n      var _this$impl;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"long\"](curArg, {\n            context: \"Failed to execute 'insertRow' on 'HTMLTableElement': parameter 1\"\n          });\n        } else {\n          curArg = -1;\n        }\n\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl = this[impl]).insertRow.apply(_this$impl, args));\n    }\n  }, {\n    key: \"deleteRow\",\n    value: function deleteRow(index) {\n      var _this$impl2;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'deleteRow' on 'HTMLTableElement': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"long\"](curArg, {\n          context: \"Failed to execute 'deleteRow' on 'HTMLTableElement': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return (_this$impl2 = this[impl]).deleteRow.apply(_this$impl2, args);\n    }\n  }, {\n    key: \"caption\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"caption\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (V === null || V === undefined) {\n        V = null;\n      } else {\n        V = convertHTMLTableCaptionElement(V, {\n          context: \"Failed to set the 'caption' property on 'HTMLTableElement': The provided value\"\n        });\n      }\n\n      this[impl][\"caption\"] = V;\n    }\n  }, {\n    key: \"tHead\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"tHead\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (V === null || V === undefined) {\n        V = null;\n      } else {\n        V = convertHTMLTableSectionElement(V, {\n          context: \"Failed to set the 'tHead' property on 'HTMLTableElement': The provided value\"\n        });\n      }\n\n      this[impl][\"tHead\"] = V;\n    }\n  }, {\n    key: \"tFoot\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"tFoot\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (V === null || V === undefined) {\n        V = null;\n      } else {\n        V = convertHTMLTableSectionElement(V, {\n          context: \"Failed to set the 'tFoot' property on 'HTMLTableElement': The provided value\"\n        });\n      }\n\n      this[impl][\"tFoot\"] = V;\n    }\n  }, {\n    key: \"tBodies\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"tBodies\", function () {\n        return utils.tryWrapperForImpl(_this2[impl][\"tBodies\"]);\n      });\n    }\n  }, {\n    key: \"rows\",\n    get: function get() {\n      var _this3 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"rows\", function () {\n        return utils.tryWrapperForImpl(_this3[impl][\"rows\"]);\n      });\n    }\n  }, {\n    key: \"align\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"align\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'align' property on 'HTMLTableElement': The provided value\"\n      });\n      this.setAttribute(\"align\", V);\n    }\n  }, {\n    key: \"border\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"border\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'border' property on 'HTMLTableElement': The provided value\"\n      });\n      this.setAttribute(\"border\", V);\n    }\n  }, {\n    key: \"frame\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"frame\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'frame' property on 'HTMLTableElement': The provided value\"\n      });\n      this.setAttribute(\"frame\", V);\n    }\n  }, {\n    key: \"rules\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"rules\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'rules' property on 'HTMLTableElement': The provided value\"\n      });\n      this.setAttribute(\"rules\", V);\n    }\n  }, {\n    key: \"summary\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"summary\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'summary' property on 'HTMLTableElement': The provided value\"\n      });\n      this.setAttribute(\"summary\", V);\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"width\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'width' property on 'HTMLTableElement': The provided value\"\n      });\n      this.setAttribute(\"width\", V);\n    }\n  }, {\n    key: \"bgColor\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"bgColor\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'bgColor' property on 'HTMLTableElement': The provided value\",\n        treatNullAsEmptyString: true\n      });\n      this.setAttribute(\"bgColor\", V);\n    }\n  }, {\n    key: \"cellPadding\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"cellPadding\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'cellPadding' property on 'HTMLTableElement': The provided value\",\n        treatNullAsEmptyString: true\n      });\n      this.setAttribute(\"cellPadding\", V);\n    }\n  }, {\n    key: \"cellSpacing\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"cellSpacing\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'cellSpacing' property on 'HTMLTableElement': The provided value\",\n        treatNullAsEmptyString: true\n      });\n      this.setAttribute(\"cellSpacing\", V);\n    }\n  }]);\n\n  return HTMLTableElement;\n}(HTMLElement.interface);\n\nObject.defineProperties(HTMLTableElement.prototype, _defineProperty({\n  createCaption: {\n    enumerable: true\n  },\n  deleteCaption: {\n    enumerable: true\n  },\n  createTHead: {\n    enumerable: true\n  },\n  deleteTHead: {\n    enumerable: true\n  },\n  createTFoot: {\n    enumerable: true\n  },\n  deleteTFoot: {\n    enumerable: true\n  },\n  createTBody: {\n    enumerable: true\n  },\n  insertRow: {\n    enumerable: true\n  },\n  deleteRow: {\n    enumerable: true\n  },\n  caption: {\n    enumerable: true\n  },\n  tHead: {\n    enumerable: true\n  },\n  tFoot: {\n    enumerable: true\n  },\n  tBodies: {\n    enumerable: true\n  },\n  rows: {\n    enumerable: true\n  },\n  align: {\n    enumerable: true\n  },\n  border: {\n    enumerable: true\n  },\n  frame: {\n    enumerable: true\n  },\n  rules: {\n    enumerable: true\n  },\n  summary: {\n    enumerable: true\n  },\n  width: {\n    enumerable: true\n  },\n  bgColor: {\n    enumerable: true\n  },\n  cellPadding: {\n    enumerable: true\n  },\n  cellSpacing: {\n    enumerable: true\n  }\n}, Symbol.toStringTag, {\n  value: \"HTMLTableElement\",\n  configurable: true\n}));\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLTableElement'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(HTMLTableElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(HTMLTableElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: HTMLTableElement,\n  expose: {\n    Window: {\n      HTMLTableElement: HTMLTableElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../nodes/HTMLTableElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}