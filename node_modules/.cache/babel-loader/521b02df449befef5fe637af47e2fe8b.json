{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _Object$definePropert;\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertTextTrackKind = require(\"./TextTrackKind.js\").convert;\n\nvar impl = utils.implSymbol;\n\nvar HTMLElement = require(\"./HTMLElement.js\");\n\nvar HTMLMediaElement =\n/*#__PURE__*/\nfunction (_HTMLElement$interfac) {\n  _inherits(HTMLMediaElement, _HTMLElement$interfac);\n\n  function HTMLMediaElement() {\n    var _this;\n\n    _classCallCheck(this, HTMLMediaElement);\n\n    throw new TypeError(\"Illegal constructor\");\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(HTMLMediaElement, [{\n    key: \"load\",\n    value: function load() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].load();\n    }\n  }, {\n    key: \"canPlayType\",\n    value: function canPlayType(type) {\n      var _this$impl;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'canPlayType' on 'HTMLMediaElement': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'canPlayType' on 'HTMLMediaElement': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl = this[impl]).canPlayType.apply(_this$impl, args));\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl].play());\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].pause();\n    }\n  }, {\n    key: \"addTextTrack\",\n    value: function addTextTrack(kind) {\n      var _this$impl2;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'addTextTrack' on 'HTMLMediaElement': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = convertTextTrackKind(curArg, {\n          context: \"Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg = arguments[1];\n\n        if (_curArg !== undefined) {\n          _curArg = conversions[\"DOMString\"](_curArg, {\n            context: \"Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 2\"\n          });\n        } else {\n          _curArg = \"\";\n        }\n\n        args.push(_curArg);\n      }\n      {\n        var _curArg2 = arguments[2];\n\n        if (_curArg2 !== undefined) {\n          _curArg2 = conversions[\"DOMString\"](_curArg2, {\n            context: \"Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 3\"\n          });\n        } else {\n          _curArg2 = \"\";\n        }\n\n        args.push(_curArg2);\n      }\n      return utils.tryWrapperForImpl((_this$impl2 = this[impl]).addTextTrack.apply(_this$impl2, args));\n    }\n  }, {\n    key: \"src\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"src\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'src' property on 'HTMLMediaElement': The provided value\"\n      });\n      this[impl][\"src\"] = V;\n    }\n  }, {\n    key: \"currentSrc\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"currentSrc\"];\n    }\n  }, {\n    key: \"crossOrigin\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"crossOrigin\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (V === null || V === undefined) {\n        V = null;\n      } else {\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'crossOrigin' property on 'HTMLMediaElement': The provided value\"\n        });\n      }\n\n      this.setAttribute(\"crossOrigin\", V);\n    }\n  }, {\n    key: \"networkState\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"networkState\"];\n    }\n  }, {\n    key: \"preload\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"preload\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'preload' property on 'HTMLMediaElement': The provided value\"\n      });\n      this.setAttribute(\"preload\", V);\n    }\n  }, {\n    key: \"buffered\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"buffered\"]);\n    }\n  }, {\n    key: \"readyState\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"readyState\"];\n    }\n  }, {\n    key: \"seeking\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"seeking\"];\n    }\n  }, {\n    key: \"currentTime\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"currentTime\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"double\"](V, {\n        context: \"Failed to set the 'currentTime' property on 'HTMLMediaElement': The provided value\"\n      });\n      this[impl][\"currentTime\"] = V;\n    }\n  }, {\n    key: \"duration\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"duration\"];\n    }\n  }, {\n    key: \"paused\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"paused\"];\n    }\n  }, {\n    key: \"defaultPlaybackRate\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"defaultPlaybackRate\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"double\"](V, {\n        context: \"Failed to set the 'defaultPlaybackRate' property on 'HTMLMediaElement': The provided value\"\n      });\n      this[impl][\"defaultPlaybackRate\"] = V;\n    }\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"playbackRate\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"double\"](V, {\n        context: \"Failed to set the 'playbackRate' property on 'HTMLMediaElement': The provided value\"\n      });\n      this[impl][\"playbackRate\"] = V;\n    }\n  }, {\n    key: \"played\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"played\"]);\n    }\n  }, {\n    key: \"seekable\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"seekable\"]);\n    }\n  }, {\n    key: \"ended\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"ended\"];\n    }\n  }, {\n    key: \"autoplay\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this.hasAttribute(\"autoplay\");\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"boolean\"](V, {\n        context: \"Failed to set the 'autoplay' property on 'HTMLMediaElement': The provided value\"\n      });\n\n      if (V) {\n        this.setAttribute(\"autoplay\", \"\");\n      } else {\n        this.removeAttribute(\"autoplay\");\n      }\n    }\n  }, {\n    key: \"loop\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this.hasAttribute(\"loop\");\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"boolean\"](V, {\n        context: \"Failed to set the 'loop' property on 'HTMLMediaElement': The provided value\"\n      });\n\n      if (V) {\n        this.setAttribute(\"loop\", \"\");\n      } else {\n        this.removeAttribute(\"loop\");\n      }\n    }\n  }, {\n    key: \"controls\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this.hasAttribute(\"controls\");\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"boolean\"](V, {\n        context: \"Failed to set the 'controls' property on 'HTMLMediaElement': The provided value\"\n      });\n\n      if (V) {\n        this.setAttribute(\"controls\", \"\");\n      } else {\n        this.removeAttribute(\"controls\");\n      }\n    }\n  }, {\n    key: \"volume\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"volume\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"double\"](V, {\n        context: \"Failed to set the 'volume' property on 'HTMLMediaElement': The provided value\"\n      });\n      this[impl][\"volume\"] = V;\n    }\n  }, {\n    key: \"muted\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"muted\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"boolean\"](V, {\n        context: \"Failed to set the 'muted' property on 'HTMLMediaElement': The provided value\"\n      });\n      this[impl][\"muted\"] = V;\n    }\n  }, {\n    key: \"defaultMuted\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this.hasAttribute(\"muted\");\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"boolean\"](V, {\n        context: \"Failed to set the 'defaultMuted' property on 'HTMLMediaElement': The provided value\"\n      });\n\n      if (V) {\n        this.setAttribute(\"muted\", \"\");\n      } else {\n        this.removeAttribute(\"muted\");\n      }\n    }\n  }, {\n    key: \"audioTracks\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"audioTracks\", function () {\n        return utils.tryWrapperForImpl(_this2[impl][\"audioTracks\"]);\n      });\n    }\n  }, {\n    key: \"videoTracks\",\n    get: function get() {\n      var _this3 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"videoTracks\", function () {\n        return utils.tryWrapperForImpl(_this3[impl][\"videoTracks\"]);\n      });\n    }\n  }, {\n    key: \"textTracks\",\n    get: function get() {\n      var _this4 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"textTracks\", function () {\n        return utils.tryWrapperForImpl(_this4[impl][\"textTracks\"]);\n      });\n    }\n  }]);\n\n  return HTMLMediaElement;\n}(HTMLElement.interface);\n\nObject.defineProperties(HTMLMediaElement.prototype, (_Object$definePropert = {\n  load: {\n    enumerable: true\n  },\n  canPlayType: {\n    enumerable: true\n  },\n  play: {\n    enumerable: true\n  },\n  pause: {\n    enumerable: true\n  },\n  addTextTrack: {\n    enumerable: true\n  },\n  src: {\n    enumerable: true\n  },\n  currentSrc: {\n    enumerable: true\n  },\n  crossOrigin: {\n    enumerable: true\n  },\n  networkState: {\n    enumerable: true\n  },\n  preload: {\n    enumerable: true\n  },\n  buffered: {\n    enumerable: true\n  },\n  readyState: {\n    enumerable: true\n  },\n  seeking: {\n    enumerable: true\n  },\n  currentTime: {\n    enumerable: true\n  },\n  duration: {\n    enumerable: true\n  },\n  paused: {\n    enumerable: true\n  },\n  defaultPlaybackRate: {\n    enumerable: true\n  },\n  playbackRate: {\n    enumerable: true\n  },\n  played: {\n    enumerable: true\n  },\n  seekable: {\n    enumerable: true\n  },\n  ended: {\n    enumerable: true\n  },\n  autoplay: {\n    enumerable: true\n  },\n  loop: {\n    enumerable: true\n  },\n  controls: {\n    enumerable: true\n  },\n  volume: {\n    enumerable: true\n  },\n  muted: {\n    enumerable: true\n  },\n  defaultMuted: {\n    enumerable: true\n  },\n  audioTracks: {\n    enumerable: true\n  },\n  videoTracks: {\n    enumerable: true\n  },\n  textTracks: {\n    enumerable: true\n  }\n}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n  value: \"HTMLMediaElement\",\n  configurable: true\n}), _defineProperty(_Object$definePropert, \"NETWORK_EMPTY\", {\n  value: 0,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"NETWORK_IDLE\", {\n  value: 1,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"NETWORK_LOADING\", {\n  value: 2,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"NETWORK_NO_SOURCE\", {\n  value: 3,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"HAVE_NOTHING\", {\n  value: 0,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"HAVE_METADATA\", {\n  value: 1,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"HAVE_CURRENT_DATA\", {\n  value: 2,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"HAVE_FUTURE_DATA\", {\n  value: 3,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"HAVE_ENOUGH_DATA\", {\n  value: 4,\n  enumerable: true\n}), _Object$definePropert));\nObject.defineProperties(HTMLMediaElement, {\n  NETWORK_EMPTY: {\n    value: 0,\n    enumerable: true\n  },\n  NETWORK_IDLE: {\n    value: 1,\n    enumerable: true\n  },\n  NETWORK_LOADING: {\n    value: 2,\n    enumerable: true\n  },\n  NETWORK_NO_SOURCE: {\n    value: 3,\n    enumerable: true\n  },\n  HAVE_NOTHING: {\n    value: 0,\n    enumerable: true\n  },\n  HAVE_METADATA: {\n    value: 1,\n    enumerable: true\n  },\n  HAVE_CURRENT_DATA: {\n    value: 2,\n    enumerable: true\n  },\n  HAVE_FUTURE_DATA: {\n    value: 3,\n    enumerable: true\n  },\n  HAVE_ENOUGH_DATA: {\n    value: 4,\n    enumerable: true\n  }\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLMediaElement'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(HTMLMediaElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(HTMLMediaElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: HTMLMediaElement,\n  expose: {\n    Window: {\n      HTMLMediaElement: HTMLMediaElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../nodes/HTMLMediaElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}