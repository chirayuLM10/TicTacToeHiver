{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _Object$definePropert;\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar isNode = require(\"./Node.js\").is;\n\nvar impl = utils.implSymbol;\n\nvar Node = require(\"./Node.js\");\n\nvar NonElementParentNode = require(\"./NonElementParentNode.js\");\n\nvar ParentNode = require(\"./ParentNode.js\");\n\nvar DocumentFragment =\n/*#__PURE__*/\nfunction (_Node$interface) {\n  _inherits(DocumentFragment, _Node$interface);\n\n  function DocumentFragment() {\n    var _this;\n\n    _classCallCheck(this, DocumentFragment);\n\n    return _possibleConstructorReturn(_this, iface.setup(Object.create((this instanceof DocumentFragment ? this.constructor : void 0).prototype)));\n  }\n\n  _createClass(DocumentFragment, [{\n    key: \"getElementById\",\n    value: function getElementById(elementId) {\n      var _this$impl;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'getElementById' on 'DocumentFragment': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'getElementById' on 'DocumentFragment': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl = this[impl]).getElementById.apply(_this$impl, args));\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      var _this$impl2;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var args = [];\n\n      for (var i = 0; i < arguments.length; i++) {\n        var curArg = arguments[i];\n\n        if (isNode(curArg)) {\n          curArg = utils.implForWrapper(curArg);\n        } else {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'prepend' on 'DocumentFragment': parameter \" + (i + 1)\n          });\n        }\n\n        args.push(curArg);\n      }\n\n      return (_this$impl2 = this[impl]).prepend.apply(_this$impl2, args);\n    }\n  }, {\n    key: \"append\",\n    value: function append() {\n      var _this$impl3;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var args = [];\n\n      for (var i = 0; i < arguments.length; i++) {\n        var curArg = arguments[i];\n\n        if (isNode(curArg)) {\n          curArg = utils.implForWrapper(curArg);\n        } else {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'append' on 'DocumentFragment': parameter \" + (i + 1)\n          });\n        }\n\n        args.push(curArg);\n      }\n\n      return (_this$impl3 = this[impl]).append.apply(_this$impl3, args);\n    }\n  }, {\n    key: \"querySelector\",\n    value: function querySelector(selectors) {\n      var _this$impl4;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'querySelector' on 'DocumentFragment': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'querySelector' on 'DocumentFragment': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl4 = this[impl]).querySelector.apply(_this$impl4, args));\n    }\n  }, {\n    key: \"querySelectorAll\",\n    value: function querySelectorAll(selectors) {\n      var _this$impl5;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'querySelectorAll' on 'DocumentFragment': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'querySelectorAll' on 'DocumentFragment': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl5 = this[impl]).querySelectorAll.apply(_this$impl5, args));\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"children\", function () {\n        return utils.tryWrapperForImpl(_this2[impl][\"children\"]);\n      });\n    }\n  }, {\n    key: \"firstElementChild\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"firstElementChild\"]);\n    }\n  }, {\n    key: \"lastElementChild\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"lastElementChild\"]);\n    }\n  }, {\n    key: \"childElementCount\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"childElementCount\"];\n    }\n  }]);\n\n  return DocumentFragment;\n}(Node.interface);\n\nObject.defineProperties(DocumentFragment.prototype, (_Object$definePropert = {\n  getElementById: {\n    enumerable: true\n  },\n  prepend: {\n    enumerable: true\n  },\n  append: {\n    enumerable: true\n  },\n  querySelector: {\n    enumerable: true\n  },\n  querySelectorAll: {\n    enumerable: true\n  },\n  children: {\n    enumerable: true\n  },\n  firstElementChild: {\n    enumerable: true\n  },\n  lastElementChild: {\n    enumerable: true\n  },\n  childElementCount: {\n    enumerable: true\n  }\n}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n  value: \"DocumentFragment\",\n  configurable: true\n}), _defineProperty(_Object$definePropert, Symbol.unscopables, {\n  value: {\n    prepend: true,\n    append: true\n  },\n  configurable: true\n}), _Object$definePropert));\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'DocumentFragment'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(DocumentFragment.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(DocumentFragment.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    Node._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: DocumentFragment,\n  expose: {\n    Window: {\n      DocumentFragment: DocumentFragment\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nNonElementParentNode._mixedIntoPredicates.push(module.exports.is);\n\nParentNode._mixedIntoPredicates.push(module.exports.is);\n\nvar Impl = require(\"../nodes/DocumentFragment-impl.js\");","map":null,"metadata":{},"sourceType":"script"}