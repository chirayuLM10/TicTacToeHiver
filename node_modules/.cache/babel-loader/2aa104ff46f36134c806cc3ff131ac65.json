{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar isBlob = require(\"./Blob.js\").is;\n\nvar convertBlob = require(\"./Blob.js\").convert;\n\nvar BinaryType = require(\"./BinaryType.js\");\n\nvar impl = utils.implSymbol;\n\nvar EventTarget = require(\"./EventTarget.js\");\n\nmodule.exports = {\n  createInterface: function createInterface() {\n    var _Object$definePropert;\n\n    var defaultPrivateData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var WebSocket =\n    /*#__PURE__*/\n    function (_EventTarget$interfac) {\n      _inherits(WebSocket, _EventTarget$interfac);\n\n      function WebSocket(url) {\n        var _this;\n\n        _classCallCheck(this, WebSocket);\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to construct 'WebSocket': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to construct 'WebSocket': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg = arguments[1];\n\n          if (_curArg !== undefined) {\n            if (utils.isObject(_curArg)) {\n              if (_curArg[Symbol.iterator] !== undefined) {\n                if (!utils.isObject(_curArg)) {\n                  throw new TypeError(\"Failed to construct 'WebSocket': parameter 2\" + \" sequence\" + \" is not an iterable object.\");\n                } else {\n                  var V = [];\n                  var tmp = _curArg;\n                  var _iteratorNormalCompletion = true;\n                  var _didIteratorError = false;\n                  var _iteratorError = undefined;\n\n                  try {\n                    for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                      var nextItem = _step.value;\n                      nextItem = conversions[\"DOMString\"](nextItem, {\n                        context: \"Failed to construct 'WebSocket': parameter 2\" + \" sequence\" + \"'s element\"\n                      });\n                      V.push(nextItem);\n                    }\n                  } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                      }\n                    } finally {\n                      if (_didIteratorError) {\n                        throw _iteratorError;\n                      }\n                    }\n                  }\n\n                  _curArg = V;\n                }\n              } else {}\n            } else {\n              _curArg = conversions[\"DOMString\"](_curArg, {\n                context: \"Failed to construct 'WebSocket': parameter 2\"\n              });\n            }\n          } else {\n            _curArg = [];\n          }\n\n          args.push(_curArg);\n        }\n        return _possibleConstructorReturn(_this, iface.setup(Object.create((this instanceof WebSocket ? this.constructor : void 0).prototype), args));\n      }\n\n      _createClass(WebSocket, [{\n        key: \"close\",\n        value: function close() {\n          var _this$impl;\n\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          var args = [];\n          {\n            var curArg = arguments[0];\n\n            if (curArg !== undefined) {\n              curArg = conversions[\"unsigned short\"](curArg, {\n                context: \"Failed to execute 'close' on 'WebSocket': parameter 1\",\n                clamp: true\n              });\n            }\n\n            args.push(curArg);\n          }\n          {\n            var _curArg2 = arguments[1];\n\n            if (_curArg2 !== undefined) {\n              _curArg2 = conversions[\"USVString\"](_curArg2, {\n                context: \"Failed to execute 'close' on 'WebSocket': parameter 2\"\n              });\n            }\n\n            args.push(_curArg2);\n          }\n          return (_this$impl = this[impl]).close.apply(_this$impl, args);\n        }\n      }, {\n        key: \"send\",\n        value: function send(data) {\n          var _this$impl2;\n\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          if (arguments.length < 1) {\n            throw new TypeError(\"Failed to execute 'send' on 'WebSocket': 1 argument required, but only \" + arguments.length + \" present.\");\n          }\n\n          var args = [];\n          {\n            var curArg = arguments[0];\n\n            if (isBlob(curArg)) {\n              {\n                var _curArg3 = arguments[0];\n                _curArg3 = convertBlob(_curArg3, {\n                  context: \"Failed to execute 'send' on 'WebSocket': parameter 1\"\n                });\n                args.push(_curArg3);\n              }\n            } else if (curArg instanceof ArrayBuffer || typeof SharedArrayBuffer !== \"undefined\" && curArg instanceof SharedArrayBuffer) {\n              {\n                var _curArg4 = arguments[0];\n                _curArg4 = conversions[\"ArrayBuffer\"](_curArg4, {\n                  context: \"Failed to execute 'send' on 'WebSocket': parameter 1\"\n                });\n                args.push(_curArg4);\n              }\n            } else if (ArrayBuffer.isView(curArg)) {\n              {\n                var _curArg5 = arguments[0];\n\n                if (ArrayBuffer.isView(_curArg5)) {} else {\n                  throw new TypeError(\"Failed to execute 'send' on 'WebSocket': parameter 1\" + \" is not of any supported type.\");\n                }\n\n                args.push(_curArg5);\n              }\n            } else {\n              {\n                var _curArg6 = arguments[0];\n                _curArg6 = conversions[\"USVString\"](_curArg6, {\n                  context: \"Failed to execute 'send' on 'WebSocket': parameter 1\"\n                });\n                args.push(_curArg6);\n              }\n            }\n          }\n          return (_this$impl2 = this[impl]).send.apply(_this$impl2, args);\n        }\n      }, {\n        key: \"url\",\n        get: function get() {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          return this[impl][\"url\"];\n        }\n      }, {\n        key: \"readyState\",\n        get: function get() {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          return this[impl][\"readyState\"];\n        }\n      }, {\n        key: \"bufferedAmount\",\n        get: function get() {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          return this[impl][\"bufferedAmount\"];\n        }\n      }, {\n        key: \"onopen\",\n        get: function get() {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          return utils.tryWrapperForImpl(this[impl][\"onopen\"]);\n        },\n        set: function set(V) {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          V = utils.tryImplForWrapper(V);\n          this[impl][\"onopen\"] = V;\n        }\n      }, {\n        key: \"onerror\",\n        get: function get() {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          return utils.tryWrapperForImpl(this[impl][\"onerror\"]);\n        },\n        set: function set(V) {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          V = utils.tryImplForWrapper(V);\n          this[impl][\"onerror\"] = V;\n        }\n      }, {\n        key: \"onclose\",\n        get: function get() {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          return utils.tryWrapperForImpl(this[impl][\"onclose\"]);\n        },\n        set: function set(V) {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          V = utils.tryImplForWrapper(V);\n          this[impl][\"onclose\"] = V;\n        }\n      }, {\n        key: \"extensions\",\n        get: function get() {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          return this[impl][\"extensions\"];\n        }\n      }, {\n        key: \"protocol\",\n        get: function get() {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          return this[impl][\"protocol\"];\n        }\n      }, {\n        key: \"onmessage\",\n        get: function get() {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          return utils.tryWrapperForImpl(this[impl][\"onmessage\"]);\n        },\n        set: function set(V) {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          V = utils.tryImplForWrapper(V);\n          this[impl][\"onmessage\"] = V;\n        }\n      }, {\n        key: \"binaryType\",\n        get: function get() {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          return utils.tryWrapperForImpl(this[impl][\"binaryType\"]);\n        },\n        set: function set(V) {\n          if (!this || !module.exports.is(this)) {\n            throw new TypeError(\"Illegal invocation\");\n          }\n\n          V = \"\".concat(V);\n\n          if (!BinaryType.enumerationValues.has(V)) {\n            return;\n          }\n\n          this[impl][\"binaryType\"] = V;\n        }\n      }]);\n\n      return WebSocket;\n    }(EventTarget.interface);\n\n    Object.defineProperties(WebSocket.prototype, (_Object$definePropert = {\n      close: {\n        enumerable: true\n      },\n      send: {\n        enumerable: true\n      },\n      url: {\n        enumerable: true\n      },\n      readyState: {\n        enumerable: true\n      },\n      bufferedAmount: {\n        enumerable: true\n      },\n      onopen: {\n        enumerable: true\n      },\n      onerror: {\n        enumerable: true\n      },\n      onclose: {\n        enumerable: true\n      },\n      extensions: {\n        enumerable: true\n      },\n      protocol: {\n        enumerable: true\n      },\n      onmessage: {\n        enumerable: true\n      },\n      binaryType: {\n        enumerable: true\n      }\n    }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n      value: \"WebSocket\",\n      configurable: true\n    }), _defineProperty(_Object$definePropert, \"CONNECTING\", {\n      value: 0,\n      enumerable: true\n    }), _defineProperty(_Object$definePropert, \"OPEN\", {\n      value: 1,\n      enumerable: true\n    }), _defineProperty(_Object$definePropert, \"CLOSING\", {\n      value: 2,\n      enumerable: true\n    }), _defineProperty(_Object$definePropert, \"CLOSED\", {\n      value: 3,\n      enumerable: true\n    }), _Object$definePropert));\n    Object.defineProperties(WebSocket, {\n      CONNECTING: {\n        value: 0,\n        enumerable: true\n      },\n      OPEN: {\n        value: 1,\n        enumerable: true\n      },\n      CLOSING: {\n        value: 2,\n        enumerable: true\n      },\n      CLOSED: {\n        value: 3,\n        enumerable: true\n      }\n    });\n    var iface = {\n      create: function create(constructorArgs, privateData) {\n        var obj = Object.create(WebSocket.prototype);\n        obj = this.setup(obj, constructorArgs, privateData);\n        return obj;\n      },\n      createImpl: function createImpl(constructorArgs, privateData) {\n        var obj = Object.create(WebSocket.prototype);\n        obj = this.setup(obj, constructorArgs, privateData);\n        return utils.implForWrapper(obj);\n      },\n      _internalSetup: function _internalSetup(obj) {\n        EventTarget._internalSetup(obj);\n      },\n      setup: function setup(obj, constructorArgs, privateData) {\n        if (!privateData) privateData = {};\n\n        for (var prop in defaultPrivateData) {\n          if (!(prop in privateData)) {\n            privateData[prop] = defaultPrivateData[prop];\n          }\n        }\n\n        privateData.wrapper = obj;\n\n        this._internalSetup(obj);\n\n        Object.defineProperty(obj, impl, {\n          value: new Impl.implementation(constructorArgs, privateData),\n          configurable: true\n        });\n        obj[impl][utils.wrapperSymbol] = obj;\n\n        if (Impl.init) {\n          Impl.init(obj[impl], privateData);\n        }\n\n        return obj;\n      },\n      interface: WebSocket,\n      expose: {\n        Window: {\n          WebSocket: WebSocket\n        },\n        Worker: {\n          WebSocket: WebSocket\n        }\n      }\n    }; // iface\n\n    return iface;\n  },\n  // createInterface\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var isMixedInto = _step3.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'WebSocket'.\"));\n  }\n}; // module.exports\n\nvar Impl = require(\"../websockets/WebSocket-impl.js\");","map":null,"metadata":{},"sourceType":"script"}