{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _Object$definePropert;\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertGetRootNodeOptions = require(\"./GetRootNodeOptions.js\").convert;\n\nvar impl = utils.implSymbol;\n\nvar EventTarget = require(\"./EventTarget.js\");\n\nvar Node =\n/*#__PURE__*/\nfunction (_EventTarget$interfac) {\n  _inherits(Node, _EventTarget$interfac);\n\n  function Node() {\n    var _this;\n\n    _classCallCheck(this, Node);\n\n    throw new TypeError(\"Illegal constructor\");\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(Node, [{\n    key: \"getRootNode\",\n    value: function getRootNode() {\n      var _this$impl;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = convertGetRootNodeOptions(curArg, {\n          context: \"Failed to execute 'getRootNode' on 'Node': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl = this[impl]).getRootNode.apply(_this$impl, args));\n    }\n  }, {\n    key: \"hasChildNodes\",\n    value: function hasChildNodes() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].hasChildNodes();\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].normalize();\n    }\n  }, {\n    key: \"cloneNode\",\n    value: function cloneNode() {\n      var _this$impl2;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"boolean\"](curArg, {\n            context: \"Failed to execute 'cloneNode' on 'Node': parameter 1\"\n          });\n        } else {\n          curArg = false;\n        }\n\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl2 = this[impl]).cloneNode.apply(_this$impl2, args));\n    }\n  }, {\n    key: \"isEqualNode\",\n    value: function isEqualNode(otherNode) {\n      var _this$impl3;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'isEqualNode' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg === null || curArg === undefined) {\n          curArg = null;\n        } else {\n          curArg = module.exports.convert(curArg, {\n            context: \"Failed to execute 'isEqualNode' on 'Node': parameter 1\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      return (_this$impl3 = this[impl]).isEqualNode.apply(_this$impl3, args);\n    }\n  }, {\n    key: \"isSameNode\",\n    value: function isSameNode(otherNode) {\n      var _this$impl4;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'isSameNode' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg === null || curArg === undefined) {\n          curArg = null;\n        } else {\n          curArg = module.exports.convert(curArg, {\n            context: \"Failed to execute 'isSameNode' on 'Node': parameter 1\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      return (_this$impl4 = this[impl]).isSameNode.apply(_this$impl4, args);\n    }\n  }, {\n    key: \"compareDocumentPosition\",\n    value: function compareDocumentPosition(other) {\n      var _this$impl5;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'compareDocumentPosition' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = module.exports.convert(curArg, {\n          context: \"Failed to execute 'compareDocumentPosition' on 'Node': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return (_this$impl5 = this[impl]).compareDocumentPosition.apply(_this$impl5, args);\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(other) {\n      var _this$impl6;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'contains' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg === null || curArg === undefined) {\n          curArg = null;\n        } else {\n          curArg = module.exports.convert(curArg, {\n            context: \"Failed to execute 'contains' on 'Node': parameter 1\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      return (_this$impl6 = this[impl]).contains.apply(_this$impl6, args);\n    }\n  }, {\n    key: \"lookupPrefix\",\n    value: function lookupPrefix(namespace) {\n      var _this$impl7;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'lookupPrefix' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg === null || curArg === undefined) {\n          curArg = null;\n        } else {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'lookupPrefix' on 'Node': parameter 1\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      return (_this$impl7 = this[impl]).lookupPrefix.apply(_this$impl7, args);\n    }\n  }, {\n    key: \"lookupNamespaceURI\",\n    value: function lookupNamespaceURI(prefix) {\n      var _this$impl8;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'lookupNamespaceURI' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg === null || curArg === undefined) {\n          curArg = null;\n        } else {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'lookupNamespaceURI' on 'Node': parameter 1\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      return (_this$impl8 = this[impl]).lookupNamespaceURI.apply(_this$impl8, args);\n    }\n  }, {\n    key: \"isDefaultNamespace\",\n    value: function isDefaultNamespace(namespace) {\n      var _this$impl9;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'isDefaultNamespace' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg === null || curArg === undefined) {\n          curArg = null;\n        } else {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'isDefaultNamespace' on 'Node': parameter 1\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      return (_this$impl9 = this[impl]).isDefaultNamespace.apply(_this$impl9, args);\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(node, child) {\n      var _this$impl10;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\"Failed to execute 'insertBefore' on 'Node': 2 arguments required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = module.exports.convert(curArg, {\n          context: \"Failed to execute 'insertBefore' on 'Node': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg = arguments[1];\n\n        if (_curArg === null || _curArg === undefined) {\n          _curArg = null;\n        } else {\n          _curArg = module.exports.convert(_curArg, {\n            context: \"Failed to execute 'insertBefore' on 'Node': parameter 2\"\n          });\n        }\n\n        args.push(_curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl10 = this[impl]).insertBefore.apply(_this$impl10, args));\n    }\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(node) {\n      var _this$impl11;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'appendChild' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = module.exports.convert(curArg, {\n          context: \"Failed to execute 'appendChild' on 'Node': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl11 = this[impl]).appendChild.apply(_this$impl11, args));\n    }\n  }, {\n    key: \"replaceChild\",\n    value: function replaceChild(node, child) {\n      var _this$impl12;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\"Failed to execute 'replaceChild' on 'Node': 2 arguments required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = module.exports.convert(curArg, {\n          context: \"Failed to execute 'replaceChild' on 'Node': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg2 = arguments[1];\n        _curArg2 = module.exports.convert(_curArg2, {\n          context: \"Failed to execute 'replaceChild' on 'Node': parameter 2\"\n        });\n        args.push(_curArg2);\n      }\n      return utils.tryWrapperForImpl((_this$impl12 = this[impl]).replaceChild.apply(_this$impl12, args));\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      var _this$impl13;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'removeChild' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = module.exports.convert(curArg, {\n          context: \"Failed to execute 'removeChild' on 'Node': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl((_this$impl13 = this[impl]).removeChild.apply(_this$impl13, args));\n    }\n  }, {\n    key: \"nodeType\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"nodeType\"];\n    }\n  }, {\n    key: \"nodeName\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"nodeName\"];\n    }\n  }, {\n    key: \"baseURI\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"baseURI\"];\n    }\n  }, {\n    key: \"isConnected\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"isConnected\"];\n    }\n  }, {\n    key: \"ownerDocument\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ownerDocument\"]);\n    }\n  }, {\n    key: \"parentNode\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"parentNode\"]);\n    }\n  }, {\n    key: \"parentElement\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"parentElement\"]);\n    }\n  }, {\n    key: \"childNodes\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"childNodes\", function () {\n        return utils.tryWrapperForImpl(_this2[impl][\"childNodes\"]);\n      });\n    }\n  }, {\n    key: \"firstChild\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"firstChild\"]);\n    }\n  }, {\n    key: \"lastChild\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"lastChild\"]);\n    }\n  }, {\n    key: \"previousSibling\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"previousSibling\"]);\n    }\n  }, {\n    key: \"nextSibling\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"nextSibling\"]);\n    }\n  }, {\n    key: \"nodeValue\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"nodeValue\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (V === null || V === undefined) {\n        V = null;\n      } else {\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'nodeValue' property on 'Node': The provided value\"\n        });\n      }\n\n      this[impl][\"nodeValue\"] = V;\n    }\n  }, {\n    key: \"textContent\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"textContent\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (V === null || V === undefined) {\n        V = null;\n      } else {\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'textContent' property on 'Node': The provided value\"\n        });\n      }\n\n      this[impl][\"textContent\"] = V;\n    }\n  }]);\n\n  return Node;\n}(EventTarget.interface);\n\nObject.defineProperties(Node.prototype, (_Object$definePropert = {\n  getRootNode: {\n    enumerable: true\n  },\n  hasChildNodes: {\n    enumerable: true\n  },\n  normalize: {\n    enumerable: true\n  },\n  cloneNode: {\n    enumerable: true\n  },\n  isEqualNode: {\n    enumerable: true\n  },\n  isSameNode: {\n    enumerable: true\n  },\n  compareDocumentPosition: {\n    enumerable: true\n  },\n  contains: {\n    enumerable: true\n  },\n  lookupPrefix: {\n    enumerable: true\n  },\n  lookupNamespaceURI: {\n    enumerable: true\n  },\n  isDefaultNamespace: {\n    enumerable: true\n  },\n  insertBefore: {\n    enumerable: true\n  },\n  appendChild: {\n    enumerable: true\n  },\n  replaceChild: {\n    enumerable: true\n  },\n  removeChild: {\n    enumerable: true\n  },\n  nodeType: {\n    enumerable: true\n  },\n  nodeName: {\n    enumerable: true\n  },\n  baseURI: {\n    enumerable: true\n  },\n  isConnected: {\n    enumerable: true\n  },\n  ownerDocument: {\n    enumerable: true\n  },\n  parentNode: {\n    enumerable: true\n  },\n  parentElement: {\n    enumerable: true\n  },\n  childNodes: {\n    enumerable: true\n  },\n  firstChild: {\n    enumerable: true\n  },\n  lastChild: {\n    enumerable: true\n  },\n  previousSibling: {\n    enumerable: true\n  },\n  nextSibling: {\n    enumerable: true\n  },\n  nodeValue: {\n    enumerable: true\n  },\n  textContent: {\n    enumerable: true\n  }\n}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n  value: \"Node\",\n  configurable: true\n}), _defineProperty(_Object$definePropert, \"ELEMENT_NODE\", {\n  value: 1,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"ATTRIBUTE_NODE\", {\n  value: 2,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"TEXT_NODE\", {\n  value: 3,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"CDATA_SECTION_NODE\", {\n  value: 4,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"ENTITY_REFERENCE_NODE\", {\n  value: 5,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"ENTITY_NODE\", {\n  value: 6,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"PROCESSING_INSTRUCTION_NODE\", {\n  value: 7,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"COMMENT_NODE\", {\n  value: 8,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"DOCUMENT_NODE\", {\n  value: 9,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"DOCUMENT_TYPE_NODE\", {\n  value: 10,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"DOCUMENT_FRAGMENT_NODE\", {\n  value: 11,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"NOTATION_NODE\", {\n  value: 12,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"DOCUMENT_POSITION_DISCONNECTED\", {\n  value: 0x01,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"DOCUMENT_POSITION_PRECEDING\", {\n  value: 0x02,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"DOCUMENT_POSITION_FOLLOWING\", {\n  value: 0x04,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"DOCUMENT_POSITION_CONTAINS\", {\n  value: 0x08,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"DOCUMENT_POSITION_CONTAINED_BY\", {\n  value: 0x10,\n  enumerable: true\n}), _defineProperty(_Object$definePropert, \"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\", {\n  value: 0x20,\n  enumerable: true\n}), _Object$definePropert));\nObject.defineProperties(Node, {\n  ELEMENT_NODE: {\n    value: 1,\n    enumerable: true\n  },\n  ATTRIBUTE_NODE: {\n    value: 2,\n    enumerable: true\n  },\n  TEXT_NODE: {\n    value: 3,\n    enumerable: true\n  },\n  CDATA_SECTION_NODE: {\n    value: 4,\n    enumerable: true\n  },\n  ENTITY_REFERENCE_NODE: {\n    value: 5,\n    enumerable: true\n  },\n  ENTITY_NODE: {\n    value: 6,\n    enumerable: true\n  },\n  PROCESSING_INSTRUCTION_NODE: {\n    value: 7,\n    enumerable: true\n  },\n  COMMENT_NODE: {\n    value: 8,\n    enumerable: true\n  },\n  DOCUMENT_NODE: {\n    value: 9,\n    enumerable: true\n  },\n  DOCUMENT_TYPE_NODE: {\n    value: 10,\n    enumerable: true\n  },\n  DOCUMENT_FRAGMENT_NODE: {\n    value: 11,\n    enumerable: true\n  },\n  NOTATION_NODE: {\n    value: 12,\n    enumerable: true\n  },\n  DOCUMENT_POSITION_DISCONNECTED: {\n    value: 0x01,\n    enumerable: true\n  },\n  DOCUMENT_POSITION_PRECEDING: {\n    value: 0x02,\n    enumerable: true\n  },\n  DOCUMENT_POSITION_FOLLOWING: {\n    value: 0x04,\n    enumerable: true\n  },\n  DOCUMENT_POSITION_CONTAINS: {\n    value: 0x08,\n    enumerable: true\n  },\n  DOCUMENT_POSITION_CONTAINED_BY: {\n    value: 0x10,\n    enumerable: true\n  },\n  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: {\n    value: 0x20,\n    enumerable: true\n  }\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Node'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(Node.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(Node.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    EventTarget._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: Node,\n  expose: {\n    Window: {\n      Node: Node\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../nodes/Node-impl.js\");","map":null,"metadata":{},"sourceType":"script"}