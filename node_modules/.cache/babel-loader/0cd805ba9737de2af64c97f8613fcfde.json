{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar path = require(\"path\");\n\nvar fs = require(\"pn/fs\");\n\nvar vm = require(\"vm\");\n\nvar toughCookie = require(\"tough-cookie\");\n\nvar sniffHTMLEncoding = require(\"html-encoding-sniffer\");\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar whatwgEncoding = require(\"whatwg-encoding\");\n\nvar _require = require(\"whatwg-url\"),\n    URL = _require.URL;\n\nvar MIMEType = require(\"whatwg-mimetype\");\n\nvar idlUtils = require(\"./jsdom/living/generated/utils.js\");\n\nvar VirtualConsole = require(\"./jsdom/virtual-console.js\");\n\nvar Window = require(\"./jsdom/browser/Window.js\");\n\nvar _require2 = require(\"./jsdom/living/domparsing/serialization.js\"),\n    fragmentSerialization = _require2.fragmentSerialization;\n\nvar ResourceLoader = require(\"./jsdom/browser/resources/resource-loader.js\");\n\nvar NoOpResourceLoader = require(\"./jsdom/browser/resources/no-op-resource-loader.js\"); // This symbol allows us to smuggle a non-public option through to the JSDOM constructor, for use by JSDOM.fromURL.\n\n\nvar transportLayerEncodingLabelHiddenOption = Symbol(\"transportLayerEncodingLabel\");\n\nvar CookieJar =\n/*#__PURE__*/\nfunction (_toughCookie$CookieJa) {\n  _inherits(CookieJar, _toughCookie$CookieJa);\n\n  function CookieJar(store, options) {\n    _classCallCheck(this, CookieJar);\n\n    // jsdom cookie jars must be loose by default\n    return _possibleConstructorReturn(this, _getPrototypeOf(CookieJar).call(this, store, Object.assign({\n      looseMode: true\n    }, options)));\n  }\n\n  return CookieJar;\n}(toughCookie.CookieJar);\n\nvar window = Symbol(\"window\");\nvar sharedFragmentDocument = null;\n\nvar JSDOM =\n/*#__PURE__*/\nfunction () {\n  function JSDOM(input) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, JSDOM);\n\n    var mimeType = new MIMEType(options.contentType === undefined ? \"text/html\" : options.contentType);\n\n    var _normalizeHTML = normalizeHTML(input, options[transportLayerEncodingLabelHiddenOption], mimeType),\n        html = _normalizeHTML.html,\n        encoding = _normalizeHTML.encoding;\n\n    options = transformOptions(options, encoding, mimeType);\n    this[window] = new Window(options.windowOptions);\n    var documentImpl = idlUtils.implForWrapper(this[window]._document);\n    options.beforeParse(this[window]._globalProxy); // TODO NEWAPI: this is still pretty hacky. It's also different than jsdom.jsdom. Does it work? Can it be better?\n\n    documentImpl._htmlToDom.appendToDocument(html, documentImpl);\n\n    documentImpl.close();\n  }\n\n  _createClass(JSDOM, [{\n    key: \"serialize\",\n    value: function serialize() {\n      return fragmentSerialization(idlUtils.implForWrapper(this[window]._document), {\n        requireWellFormed: false\n      });\n    }\n  }, {\n    key: \"nodeLocation\",\n    value: function nodeLocation(node) {\n      if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.sourceCodeLocationInfo) {\n        throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n      }\n\n      return idlUtils.implForWrapper(node).sourceCodeLocation;\n    }\n  }, {\n    key: \"runVMScript\",\n    value: function runVMScript(script, options) {\n      if (!vm.isContext(this[window])) {\n        throw new TypeError(\"This jsdom was not configured to allow script running. \" + \"Use the runScripts option during creation.\");\n      }\n\n      return script.runInContext(this[window], options);\n    }\n  }, {\n    key: \"reconfigure\",\n    value: function reconfigure(settings) {\n      if (\"windowTop\" in settings) {\n        this[window]._top = settings.windowTop;\n      }\n\n      if (\"url\" in settings) {\n        var document = idlUtils.implForWrapper(this[window]._document);\n        var url = whatwgURL.parseURL(settings.url);\n\n        if (url === null) {\n          throw new TypeError(\"Could not parse \\\"\".concat(settings.url, \"\\\" as a URL\"));\n        }\n\n        document._URL = url;\n        document.origin = whatwgURL.serializeURLOrigin(document._URL);\n      }\n    }\n  }, {\n    key: \"window\",\n    get: function get() {\n      // It's important to grab the global proxy, instead of just the result of `new Window(...)`, since otherwise things\n      // like `window.eval` don't exist.\n      return this[window]._globalProxy;\n    }\n  }, {\n    key: \"virtualConsole\",\n    get: function get() {\n      return this[window]._virtualConsole;\n    }\n  }, {\n    key: \"cookieJar\",\n    get: function get() {\n      // TODO NEWAPI move _cookieJar to window probably\n      return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n    }\n  }], [{\n    key: \"fragment\",\n    value: function fragment(string) {\n      if (!sharedFragmentDocument) {\n        sharedFragmentDocument = new JSDOM().window.document;\n      }\n\n      var template = sharedFragmentDocument.createElement(\"template\");\n      template.innerHTML = string;\n      return template.content;\n    }\n  }, {\n    key: \"fromURL\",\n    value: function fromURL(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return Promise.resolve().then(function () {\n        var parsedURL = new URL(url);\n        url = parsedURL.href;\n        options = normalizeFromURLOptions(options);\n        var resourceLoader = resourcesToResourceLoader(options.resources);\n        var resourceLoaderForInitialRequest = resourceLoader.constructor === NoOpResourceLoader ? new ResourceLoader() : resourceLoader;\n        var req = resourceLoaderForInitialRequest.fetch(url, {\n          accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          cookieJar: options.cookieJar,\n          referrer: options.referrer\n        });\n        return req.then(function (body) {\n          var res = req.response;\n          var transportLayerEncodingLabel;\n\n          if (\"content-type\" in res.headers) {\n            var mimeType = new MIMEType(res.headers[\"content-type\"]);\n            transportLayerEncodingLabel = mimeType.parameters.get(\"charset\");\n          }\n\n          options = Object.assign(options, _defineProperty({\n            url: req.href + parsedURL.hash,\n            contentType: res.headers[\"content-type\"],\n            referrer: req.getHeader(\"referer\")\n          }, transportLayerEncodingLabelHiddenOption, transportLayerEncodingLabel));\n          return new JSDOM(body, options);\n        });\n      });\n    }\n  }, {\n    key: \"fromFile\",\n    value: function fromFile(filename) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return Promise.resolve().then(function () {\n        options = normalizeFromFileOptions(filename, options);\n        return fs.readFile(filename).then(function (buffer) {\n          return new JSDOM(buffer, options);\n        });\n      });\n    }\n  }]);\n\n  return JSDOM;\n}();\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  } // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n\n\n  var normalized = Object.assign({}, options);\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized; // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  var normalized = Object.assign({}, options);\n\n  if (normalized.contentType === undefined) {\n    var extname = path.extname(filename);\n\n    if (extname === \".xhtml\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding, mimeType) {\n  var transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      parseOptions: {\n        sourceCodeLocationInfo: false\n      },\n      runScripts: undefined,\n      encoding: encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n      // Defaults filled in later\n      resourceLoader: undefined,\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n    // Defaults\n    beforeParse: function beforeParse() {}\n  }; // options.contentType was parsed into mimeType by the caller.\n\n  if (!mimeType.isHTML() && !mimeType.isXML()) {\n    throw new RangeError(\"The given content type of \\\"\".concat(options.contentType, \"\\\" was not a HTML or XML content type\"));\n  }\n\n  transformed.windowOptions.contentType = mimeType.essence;\n  transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = new URL(options.url).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = {\n      sourceCodeLocationInfo: true\n    };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ? new CookieJar() : options.cookieJar;\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ? new VirtualConsole().sendTo(console) : options.virtualConsole;\n\n  if (!(transformed.windowOptions.virtualConsole instanceof VirtualConsole)) {\n    throw new TypeError(\"virtualConsole must be an instance of VirtualConsole\");\n  }\n\n  transformed.windowOptions.resourceLoader = resourcesToResourceLoader(options.resources);\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n\n    if (transformed.windowOptions.runScripts !== \"dangerously\" && transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(\"runScripts must be undefined, \\\"dangerously\\\", or \\\"outside-only\\\"\");\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  } // concurrentNodeIterators??\n\n\n  return transformed;\n}\n\nfunction normalizeHTML() {\n  var html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var transportLayerEncodingLabel = arguments.length > 1 ? arguments[1] : undefined;\n  var mimeType = arguments.length > 2 ? arguments[2] : undefined;\n  var encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: mimeType.isXML() ? \"UTF-8\" : \"windows-1252\",\n      transportLayerEncodingLabel: transportLayerEncodingLabel\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return {\n    html: html,\n    encoding: encoding\n  };\n}\n\nfunction resourcesToResourceLoader(resources) {\n  switch (resources) {\n    case undefined:\n      {\n        return new NoOpResourceLoader();\n      }\n\n    case \"usable\":\n      {\n        return new ResourceLoader();\n      }\n\n    default:\n      {\n        if (!(resources instanceof ResourceLoader)) {\n          throw new TypeError(\"resources must be an instance of ResourceLoader\");\n        }\n\n        return resources;\n      }\n  }\n}\n\nexports.JSDOM = JSDOM;\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.ResourceLoader = ResourceLoader;\nexports.toughCookie = toughCookie;","map":null,"metadata":{},"sourceType":"script"}