{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar impl = utils.implSymbol;\n\nvar Element = require(\"./Element.js\");\n\nvar ElementCSSInlineStyle = require(\"./ElementCSSInlineStyle.js\");\n\nvar GlobalEventHandlers = require(\"./GlobalEventHandlers.js\");\n\nvar SVGElement =\n/*#__PURE__*/\nfunction (_Element$interface) {\n  _inherits(SVGElement, _Element$interface);\n\n  function SVGElement() {\n    var _this;\n\n    _classCallCheck(this, SVGElement);\n\n    throw new TypeError(\"Illegal constructor\");\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(SVGElement, [{\n    key: \"focus\",\n    value: function focus() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].blur();\n    }\n  }, {\n    key: \"className\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"className\", function () {\n        return utils.tryWrapperForImpl(_this2[impl][\"className\"]);\n      });\n    }\n  }, {\n    key: \"dataset\",\n    get: function get() {\n      var _this3 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"dataset\", function () {\n        return utils.tryWrapperForImpl(_this3[impl][\"dataset\"]);\n      });\n    }\n  }, {\n    key: \"ownerSVGElement\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ownerSVGElement\"]);\n    }\n  }, {\n    key: \"viewportElement\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"viewportElement\"]);\n    }\n  }, {\n    key: \"tabIndex\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"tabIndex\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"long\"](V, {\n        context: \"Failed to set the 'tabIndex' property on 'SVGElement': The provided value\"\n      });\n      this[impl][\"tabIndex\"] = V;\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      var _this4 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"style\", function () {\n        return utils.tryWrapperForImpl(_this4[impl][\"style\"]);\n      });\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      this.style.cssText = V;\n    }\n  }, {\n    key: \"onabort\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onabort\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onabort\"] = V;\n    }\n  }, {\n    key: \"onauxclick\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onauxclick\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onauxclick\"] = V;\n    }\n  }, {\n    key: \"onblur\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onblur\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onblur\"] = V;\n    }\n  }, {\n    key: \"oncancel\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oncancel\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oncancel\"] = V;\n    }\n  }, {\n    key: \"oncanplay\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oncanplay\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oncanplay\"] = V;\n    }\n  }, {\n    key: \"oncanplaythrough\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oncanplaythrough\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oncanplaythrough\"] = V;\n    }\n  }, {\n    key: \"onchange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onchange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onchange\"] = V;\n    }\n  }, {\n    key: \"onclick\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onclick\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onclick\"] = V;\n    }\n  }, {\n    key: \"onclose\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onclose\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onclose\"] = V;\n    }\n  }, {\n    key: \"oncontextmenu\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oncontextmenu\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oncontextmenu\"] = V;\n    }\n  }, {\n    key: \"oncuechange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oncuechange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oncuechange\"] = V;\n    }\n  }, {\n    key: \"ondblclick\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondblclick\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondblclick\"] = V;\n    }\n  }, {\n    key: \"ondrag\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondrag\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondrag\"] = V;\n    }\n  }, {\n    key: \"ondragend\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragend\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragend\"] = V;\n    }\n  }, {\n    key: \"ondragenter\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragenter\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragenter\"] = V;\n    }\n  }, {\n    key: \"ondragexit\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragexit\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragexit\"] = V;\n    }\n  }, {\n    key: \"ondragleave\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragleave\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragleave\"] = V;\n    }\n  }, {\n    key: \"ondragover\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragover\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragover\"] = V;\n    }\n  }, {\n    key: \"ondragstart\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondragstart\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondragstart\"] = V;\n    }\n  }, {\n    key: \"ondrop\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondrop\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondrop\"] = V;\n    }\n  }, {\n    key: \"ondurationchange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ondurationchange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ondurationchange\"] = V;\n    }\n  }, {\n    key: \"onemptied\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onemptied\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onemptied\"] = V;\n    }\n  }, {\n    key: \"onended\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onended\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onended\"] = V;\n    }\n  }, {\n    key: \"onerror\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onerror\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onerror\"] = V;\n    }\n  }, {\n    key: \"onfocus\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onfocus\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onfocus\"] = V;\n    }\n  }, {\n    key: \"oninput\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oninput\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oninput\"] = V;\n    }\n  }, {\n    key: \"oninvalid\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"oninvalid\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"oninvalid\"] = V;\n    }\n  }, {\n    key: \"onkeydown\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onkeydown\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onkeydown\"] = V;\n    }\n  }, {\n    key: \"onkeypress\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onkeypress\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onkeypress\"] = V;\n    }\n  }, {\n    key: \"onkeyup\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onkeyup\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onkeyup\"] = V;\n    }\n  }, {\n    key: \"onload\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onload\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onload\"] = V;\n    }\n  }, {\n    key: \"onloadeddata\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onloadeddata\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onloadeddata\"] = V;\n    }\n  }, {\n    key: \"onloadedmetadata\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onloadedmetadata\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onloadedmetadata\"] = V;\n    }\n  }, {\n    key: \"onloadend\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onloadend\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onloadend\"] = V;\n    }\n  }, {\n    key: \"onloadstart\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onloadstart\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onloadstart\"] = V;\n    }\n  }, {\n    key: \"onmousedown\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmousedown\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmousedown\"] = V;\n    }\n  }, {\n    key: \"onmouseenter\",\n    get: function get() {\n      return utils.tryWrapperForImpl(this[impl][\"onmouseenter\"]);\n    },\n    set: function set(V) {\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmouseenter\"] = V;\n    }\n  }, {\n    key: \"onmouseleave\",\n    get: function get() {\n      return utils.tryWrapperForImpl(this[impl][\"onmouseleave\"]);\n    },\n    set: function set(V) {\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmouseleave\"] = V;\n    }\n  }, {\n    key: \"onmousemove\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmousemove\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmousemove\"] = V;\n    }\n  }, {\n    key: \"onmouseout\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmouseout\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmouseout\"] = V;\n    }\n  }, {\n    key: \"onmouseover\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmouseover\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmouseover\"] = V;\n    }\n  }, {\n    key: \"onmouseup\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onmouseup\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onmouseup\"] = V;\n    }\n  }, {\n    key: \"onwheel\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onwheel\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onwheel\"] = V;\n    }\n  }, {\n    key: \"onpause\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onpause\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onpause\"] = V;\n    }\n  }, {\n    key: \"onplay\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onplay\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onplay\"] = V;\n    }\n  }, {\n    key: \"onplaying\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onplaying\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onplaying\"] = V;\n    }\n  }, {\n    key: \"onprogress\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onprogress\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onprogress\"] = V;\n    }\n  }, {\n    key: \"onratechange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onratechange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onratechange\"] = V;\n    }\n  }, {\n    key: \"onreset\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onreset\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onreset\"] = V;\n    }\n  }, {\n    key: \"onresize\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onresize\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onresize\"] = V;\n    }\n  }, {\n    key: \"onscroll\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onscroll\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onscroll\"] = V;\n    }\n  }, {\n    key: \"onsecuritypolicyviolation\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onsecuritypolicyviolation\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onsecuritypolicyviolation\"] = V;\n    }\n  }, {\n    key: \"onseeked\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onseeked\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onseeked\"] = V;\n    }\n  }, {\n    key: \"onseeking\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onseeking\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onseeking\"] = V;\n    }\n  }, {\n    key: \"onselect\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onselect\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onselect\"] = V;\n    }\n  }, {\n    key: \"onstalled\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onstalled\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onstalled\"] = V;\n    }\n  }, {\n    key: \"onsubmit\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onsubmit\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onsubmit\"] = V;\n    }\n  }, {\n    key: \"onsuspend\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onsuspend\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onsuspend\"] = V;\n    }\n  }, {\n    key: \"ontimeupdate\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ontimeupdate\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ontimeupdate\"] = V;\n    }\n  }, {\n    key: \"ontoggle\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"ontoggle\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"ontoggle\"] = V;\n    }\n  }, {\n    key: \"onvolumechange\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onvolumechange\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onvolumechange\"] = V;\n    }\n  }, {\n    key: \"onwaiting\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"onwaiting\"]);\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = utils.tryImplForWrapper(V);\n      this[impl][\"onwaiting\"] = V;\n    }\n  }]);\n\n  return SVGElement;\n}(Element.interface);\n\nObject.defineProperties(SVGElement.prototype, _defineProperty({\n  focus: {\n    enumerable: true\n  },\n  blur: {\n    enumerable: true\n  },\n  className: {\n    enumerable: true\n  },\n  dataset: {\n    enumerable: true\n  },\n  ownerSVGElement: {\n    enumerable: true\n  },\n  viewportElement: {\n    enumerable: true\n  },\n  tabIndex: {\n    enumerable: true\n  },\n  style: {\n    enumerable: true\n  },\n  onabort: {\n    enumerable: true\n  },\n  onauxclick: {\n    enumerable: true\n  },\n  onblur: {\n    enumerable: true\n  },\n  oncancel: {\n    enumerable: true\n  },\n  oncanplay: {\n    enumerable: true\n  },\n  oncanplaythrough: {\n    enumerable: true\n  },\n  onchange: {\n    enumerable: true\n  },\n  onclick: {\n    enumerable: true\n  },\n  onclose: {\n    enumerable: true\n  },\n  oncontextmenu: {\n    enumerable: true\n  },\n  oncuechange: {\n    enumerable: true\n  },\n  ondblclick: {\n    enumerable: true\n  },\n  ondrag: {\n    enumerable: true\n  },\n  ondragend: {\n    enumerable: true\n  },\n  ondragenter: {\n    enumerable: true\n  },\n  ondragexit: {\n    enumerable: true\n  },\n  ondragleave: {\n    enumerable: true\n  },\n  ondragover: {\n    enumerable: true\n  },\n  ondragstart: {\n    enumerable: true\n  },\n  ondrop: {\n    enumerable: true\n  },\n  ondurationchange: {\n    enumerable: true\n  },\n  onemptied: {\n    enumerable: true\n  },\n  onended: {\n    enumerable: true\n  },\n  onerror: {\n    enumerable: true\n  },\n  onfocus: {\n    enumerable: true\n  },\n  oninput: {\n    enumerable: true\n  },\n  oninvalid: {\n    enumerable: true\n  },\n  onkeydown: {\n    enumerable: true\n  },\n  onkeypress: {\n    enumerable: true\n  },\n  onkeyup: {\n    enumerable: true\n  },\n  onload: {\n    enumerable: true\n  },\n  onloadeddata: {\n    enumerable: true\n  },\n  onloadedmetadata: {\n    enumerable: true\n  },\n  onloadend: {\n    enumerable: true\n  },\n  onloadstart: {\n    enumerable: true\n  },\n  onmousedown: {\n    enumerable: true\n  },\n  onmouseenter: {\n    enumerable: true\n  },\n  onmouseleave: {\n    enumerable: true\n  },\n  onmousemove: {\n    enumerable: true\n  },\n  onmouseout: {\n    enumerable: true\n  },\n  onmouseover: {\n    enumerable: true\n  },\n  onmouseup: {\n    enumerable: true\n  },\n  onwheel: {\n    enumerable: true\n  },\n  onpause: {\n    enumerable: true\n  },\n  onplay: {\n    enumerable: true\n  },\n  onplaying: {\n    enumerable: true\n  },\n  onprogress: {\n    enumerable: true\n  },\n  onratechange: {\n    enumerable: true\n  },\n  onreset: {\n    enumerable: true\n  },\n  onresize: {\n    enumerable: true\n  },\n  onscroll: {\n    enumerable: true\n  },\n  onsecuritypolicyviolation: {\n    enumerable: true\n  },\n  onseeked: {\n    enumerable: true\n  },\n  onseeking: {\n    enumerable: true\n  },\n  onselect: {\n    enumerable: true\n  },\n  onstalled: {\n    enumerable: true\n  },\n  onsubmit: {\n    enumerable: true\n  },\n  onsuspend: {\n    enumerable: true\n  },\n  ontimeupdate: {\n    enumerable: true\n  },\n  ontoggle: {\n    enumerable: true\n  },\n  onvolumechange: {\n    enumerable: true\n  },\n  onwaiting: {\n    enumerable: true\n  }\n}, Symbol.toStringTag, {\n  value: \"SVGElement\",\n  configurable: true\n}));\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'SVGElement'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(SVGElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(SVGElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    Element._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: SVGElement,\n  expose: {\n    Window: {\n      SVGElement: SVGElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nElementCSSInlineStyle._mixedIntoPredicates.push(module.exports.is);\n\nGlobalEventHandlers._mixedIntoPredicates.push(module.exports.is);\n\nvar Impl = require(\"../nodes/SVGElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}