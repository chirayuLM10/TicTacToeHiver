{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"../generated/utils\"),\n    wrapperForImpl = _require.wrapperForImpl; // If we were to implement the MutationObserver by spec, the MutationObservers will not be collected by the GC because\n// all the MO are kept in a mutation observer list (https://github.com/jsdom/jsdom/pull/2398/files#r238123889). The\n// mutation observer list is primarily used to invoke the mutation observer callback in the same order than the\n// mutation observer creation.\n// In order to get around this issue, we will assign an increasing id for each mutation observer, this way we would be\n// able to invoke the callback in the creation order without having to keep a list of all the mutation observers.\n\n\nvar mutationObserverId = 0; // https://dom.spec.whatwg.org/#mutationobserver\n\nvar MutationObserverImpl =\n/*#__PURE__*/\nfunction () {\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-mutationobserver\n  function MutationObserverImpl(args) {\n    _classCallCheck(this, MutationObserverImpl);\n\n    var _args = _slicedToArray(args, 1),\n        callback = _args[0];\n\n    this._callback = callback;\n    this._nodeList = [];\n    this._recordQueue = [];\n    this._id = ++mutationObserverId;\n  } // https://dom.spec.whatwg.org/#dom-mutationobserver-observe\n\n\n  _createClass(MutationObserverImpl, [{\n    key: \"observe\",\n    value: function observe(target, options) {\n      var _this = this;\n\n      if ((\"attributeOldValue\" in options || \"attributeFilter\" in options) && !(\"attributes\" in options)) {\n        options.attributes = true;\n      }\n\n      if (\"characterDataOldValue\" in options & !(\"characterData\" in options)) {\n        options.characterData = true;\n      }\n\n      if (!options.childList && !options.attributes && !options.characterData) {\n        throw new TypeError(\"The options object must set at least one of 'attributes', 'characterData', or 'childList' \" + \"to true.\");\n      } else if (options.attributeOldValue && !options.attributes) {\n        throw new TypeError(\"The options object may only set 'attributeOldValue' to true when 'attributes' is true or \" + \"not present.\");\n      } else if (\"attributeFilter\" in options && !options.attributes) {\n        throw new TypeError(\"The options object may only set 'attributeFilter' when 'attributes' is true or not \" + \"present.\");\n      } else if (options.characterDataOldValue && !options.characterData) {\n        throw new TypeError(\"The options object may only set 'characterDataOldValue' to true when 'characterData' is \" + \"true or not present.\");\n      }\n\n      var existingRegisteredObserver = target._registeredObserverList.find(function (registeredObserver) {\n        return registeredObserver.observer === _this;\n      });\n\n      if (existingRegisteredObserver) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this._nodeList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var node = _step.value;\n            node._registeredObserverList = node._registeredObserverList.filter(function (registeredObserver) {\n              return registeredObserver.source !== existingRegisteredObserver;\n            });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        existingRegisteredObserver.options = options;\n      } else {\n        target._registeredObserverList.push({\n          observer: this,\n          options: options\n        });\n\n        this._nodeList.push(target);\n      }\n    } // https://dom.spec.whatwg.org/#dom-mutationobserver-disconnect\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _this2 = this;\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this._nodeList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var node = _step2.value;\n          node._registeredObserverList = node._registeredObserverList.filter(function (registeredObserver) {\n            return registeredObserver.observer !== _this2;\n          });\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this._recordQueue = [];\n    } // https://dom.spec.whatwg.org/#dom-mutationobserver-takerecords\n\n  }, {\n    key: \"takeRecords\",\n    value: function takeRecords() {\n      // TODO: revisit if https://github.com/jsdom/webidl2js/pull/108 gets fixed.\n      var records = this._recordQueue.map(wrapperForImpl);\n\n      this._recordQueue = [];\n      return records;\n    }\n  }]);\n\n  return MutationObserverImpl;\n}();\n\nmodule.exports = {\n  implementation: MutationObserverImpl\n};","map":null,"metadata":{},"sourceType":"script"}