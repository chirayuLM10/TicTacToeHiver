{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar impl = utils.implSymbol;\n\nvar ValidityState =\n/*#__PURE__*/\nfunction () {\n  function ValidityState() {\n    _classCallCheck(this, ValidityState);\n\n    throw new TypeError(\"Illegal constructor\");\n  }\n\n  _createClass(ValidityState, [{\n    key: \"valueMissing\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"valueMissing\"];\n    }\n  }, {\n    key: \"typeMismatch\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"typeMismatch\"];\n    }\n  }, {\n    key: \"patternMismatch\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"patternMismatch\"];\n    }\n  }, {\n    key: \"tooLong\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"tooLong\"];\n    }\n  }, {\n    key: \"tooShort\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"tooShort\"];\n    }\n  }, {\n    key: \"rangeUnderflow\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"rangeUnderflow\"];\n    }\n  }, {\n    key: \"rangeOverflow\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"rangeOverflow\"];\n    }\n  }, {\n    key: \"stepMismatch\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"stepMismatch\"];\n    }\n  }, {\n    key: \"badInput\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"badInput\"];\n    }\n  }, {\n    key: \"customError\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"customError\"];\n    }\n  }, {\n    key: \"valid\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"valid\"];\n    }\n  }]);\n\n  return ValidityState;\n}();\n\nObject.defineProperties(ValidityState.prototype, _defineProperty({\n  valueMissing: {\n    enumerable: true\n  },\n  typeMismatch: {\n    enumerable: true\n  },\n  patternMismatch: {\n    enumerable: true\n  },\n  tooLong: {\n    enumerable: true\n  },\n  tooShort: {\n    enumerable: true\n  },\n  rangeUnderflow: {\n    enumerable: true\n  },\n  rangeOverflow: {\n    enumerable: true\n  },\n  stepMismatch: {\n    enumerable: true\n  },\n  badInput: {\n    enumerable: true\n  },\n  customError: {\n    enumerable: true\n  },\n  valid: {\n    enumerable: true\n  }\n}, Symbol.toStringTag, {\n  value: \"ValidityState\",\n  configurable: true\n}));\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'ValidityState'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(ValidityState.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(ValidityState.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {},\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: ValidityState,\n  expose: {\n    Window: {\n      ValidityState: ValidityState\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../constraint-validation/ValidityState-impl.js\");","map":null,"metadata":{},"sourceType":"script"}