{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar SlotableMixinImpl = require(\"./Slotable-impl\").implementation;\n\nvar CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar DOMException = require(\"domexception\");\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar _require2 = require(\"../../utils\"),\n    mixin = _require2.mixin;\n\nvar TextImpl =\n/*#__PURE__*/\nfunction (_CharacterDataImpl) {\n  _inherits(TextImpl, _CharacterDataImpl);\n\n  function TextImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, TextImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextImpl).call(this, args, privateData));\n\n    _this._initSlotableMixin();\n\n    _this.nodeType = NODE_TYPE.TEXT_NODE;\n    return _this;\n  }\n\n  _createClass(TextImpl, [{\n    key: \"splitText\",\n    value: function splitText(offset) {\n      offset >>>= 0;\n      var length = this.length;\n\n      if (offset > length) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      var count = length - offset;\n      var newData = this.substringData(offset, count);\n\n      var newNode = this._ownerDocument.createTextNode(newData);\n\n      var parent = domSymbolTree.parent(this);\n\n      if (parent !== null) {\n        parent._insert(newNode, this.nextSibling);\n      }\n\n      this.replaceData(offset, count, \"\");\n      return newNode; // TODO: range stuff\n    }\n  }, {\n    key: \"wholeText\",\n    get: function get() {\n      var wholeText = this.textContent;\n      var next;\n      var current = this;\n\n      while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n        wholeText = next.textContent + wholeText;\n        current = next;\n      }\n\n      current = this;\n\n      while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n        wholeText += next.textContent;\n        current = next;\n      }\n\n      return wholeText;\n    }\n  }]);\n\n  return TextImpl;\n}(CharacterDataImpl);\n\nmixin(TextImpl.prototype, SlotableMixinImpl.prototype);\nmodule.exports = {\n  implementation: TextImpl\n};","map":null,"metadata":{},"sourceType":"script"}