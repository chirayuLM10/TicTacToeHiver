{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar impl = utils.implSymbol;\n\nvar NavigatorID = require(\"./NavigatorID.js\");\n\nvar NavigatorLanguage = require(\"./NavigatorLanguage.js\");\n\nvar NavigatorOnLine = require(\"./NavigatorOnLine.js\");\n\nvar NavigatorCookies = require(\"./NavigatorCookies.js\");\n\nvar NavigatorPlugins = require(\"./NavigatorPlugins.js\");\n\nvar NavigatorConcurrentHardware = require(\"./NavigatorConcurrentHardware.js\");\n\nvar Navigator =\n/*#__PURE__*/\nfunction () {\n  function Navigator() {\n    _classCallCheck(this, Navigator);\n\n    throw new TypeError(\"Illegal constructor\");\n  }\n\n  _createClass(Navigator, [{\n    key: \"javaEnabled\",\n    value: function javaEnabled() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].javaEnabled();\n    }\n  }, {\n    key: \"appCodeName\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"appCodeName\"];\n    }\n  }, {\n    key: \"appName\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"appName\"];\n    }\n  }, {\n    key: \"appVersion\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"appVersion\"];\n    }\n  }, {\n    key: \"platform\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"platform\"];\n    }\n  }, {\n    key: \"product\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"product\"];\n    }\n  }, {\n    key: \"productSub\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"productSub\"];\n    }\n  }, {\n    key: \"userAgent\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"userAgent\"];\n    }\n  }, {\n    key: \"vendor\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"vendor\"];\n    }\n  }, {\n    key: \"vendorSub\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"vendorSub\"];\n    }\n  }, {\n    key: \"language\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"language\"];\n    }\n  }, {\n    key: \"languages\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(this[impl][\"languages\"]);\n    }\n  }, {\n    key: \"onLine\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"onLine\"];\n    }\n  }, {\n    key: \"cookieEnabled\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"cookieEnabled\"];\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      var _this = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"plugins\", function () {\n        return utils.tryWrapperForImpl(_this[impl][\"plugins\"]);\n      });\n    }\n  }, {\n    key: \"mimeTypes\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.getSameObject(this, \"mimeTypes\", function () {\n        return utils.tryWrapperForImpl(_this2[impl][\"mimeTypes\"]);\n      });\n    }\n  }, {\n    key: \"hardwareConcurrency\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"hardwareConcurrency\"];\n    }\n  }]);\n\n  return Navigator;\n}();\n\nObject.defineProperties(Navigator.prototype, _defineProperty({\n  javaEnabled: {\n    enumerable: true\n  },\n  appCodeName: {\n    enumerable: true\n  },\n  appName: {\n    enumerable: true\n  },\n  appVersion: {\n    enumerable: true\n  },\n  platform: {\n    enumerable: true\n  },\n  product: {\n    enumerable: true\n  },\n  productSub: {\n    enumerable: true\n  },\n  userAgent: {\n    enumerable: true\n  },\n  vendor: {\n    enumerable: true\n  },\n  vendorSub: {\n    enumerable: true\n  },\n  language: {\n    enumerable: true\n  },\n  languages: {\n    enumerable: true\n  },\n  onLine: {\n    enumerable: true\n  },\n  cookieEnabled: {\n    enumerable: true\n  },\n  plugins: {\n    enumerable: true\n  },\n  mimeTypes: {\n    enumerable: true\n  },\n  hardwareConcurrency: {\n    enumerable: true\n  }\n}, Symbol.toStringTag, {\n  value: \"Navigator\",\n  configurable: true\n}));\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Navigator'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(Navigator.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(Navigator.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {},\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: Navigator,\n  expose: {\n    Window: {\n      Navigator: Navigator\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nNavigatorID._mixedIntoPredicates.push(module.exports.is);\n\nNavigatorLanguage._mixedIntoPredicates.push(module.exports.is);\n\nNavigatorOnLine._mixedIntoPredicates.push(module.exports.is);\n\nNavigatorCookies._mixedIntoPredicates.push(module.exports.is);\n\nNavigatorPlugins._mixedIntoPredicates.push(module.exports.is);\n\nNavigatorConcurrentHardware._mixedIntoPredicates.push(module.exports.is);\n\nvar Impl = require(\"../navigator/Navigator-impl.js\");","map":null,"metadata":{},"sourceType":"script"}