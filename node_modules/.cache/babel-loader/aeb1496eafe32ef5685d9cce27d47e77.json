{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nmodule.exports = {\n  convertInherit: function convertInherit(obj, ret) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    {\n      var key = \"attributeFilter\";\n      var value = obj === undefined || obj === null ? undefined : obj[key];\n\n      if (value !== undefined) {\n        if (!utils.isObject(value)) {\n          throw new TypeError(context + \" has member attributeFilter that\" + \" is not an iterable object.\");\n        } else {\n          var V = [];\n          var tmp = value;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var nextItem = _step.value;\n              nextItem = conversions[\"DOMString\"](nextItem, {\n                context: context + \" has member attributeFilter that\" + \"'s element\"\n              });\n              V.push(nextItem);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          value = V;\n        }\n\n        ret[key] = value;\n      }\n    }\n    {\n      var _key = \"attributeOldValue\";\n\n      var _value = obj === undefined || obj === null ? undefined : obj[_key];\n\n      if (_value !== undefined) {\n        _value = conversions[\"boolean\"](_value, {\n          context: context + \" has member attributeOldValue that\"\n        });\n        ret[_key] = _value;\n      }\n    }\n    {\n      var _key2 = \"attributes\";\n\n      var _value2 = obj === undefined || obj === null ? undefined : obj[_key2];\n\n      if (_value2 !== undefined) {\n        _value2 = conversions[\"boolean\"](_value2, {\n          context: context + \" has member attributes that\"\n        });\n        ret[_key2] = _value2;\n      }\n    }\n    {\n      var _key3 = \"characterData\";\n\n      var _value3 = obj === undefined || obj === null ? undefined : obj[_key3];\n\n      if (_value3 !== undefined) {\n        _value3 = conversions[\"boolean\"](_value3, {\n          context: context + \" has member characterData that\"\n        });\n        ret[_key3] = _value3;\n      }\n    }\n    {\n      var _key4 = \"characterDataOldValue\";\n\n      var _value4 = obj === undefined || obj === null ? undefined : obj[_key4];\n\n      if (_value4 !== undefined) {\n        _value4 = conversions[\"boolean\"](_value4, {\n          context: context + \" has member characterDataOldValue that\"\n        });\n        ret[_key4] = _value4;\n      }\n    }\n    {\n      var _key5 = \"childList\";\n\n      var _value5 = obj === undefined || obj === null ? undefined : obj[_key5];\n\n      if (_value5 !== undefined) {\n        _value5 = conversions[\"boolean\"](_value5, {\n          context: context + \" has member childList that\"\n        });\n        ret[_key5] = _value5;\n      } else {\n        ret[_key5] = false;\n      }\n    }\n    {\n      var _key6 = \"subtree\";\n\n      var _value6 = obj === undefined || obj === null ? undefined : obj[_key6];\n\n      if (_value6 !== undefined) {\n        _value6 = conversions[\"boolean\"](_value6, {\n          context: context + \" has member subtree that\"\n        });\n        ret[_key6] = _value6;\n      } else {\n        ret[_key6] = false;\n      }\n    }\n  },\n  convert: function convert(obj) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref2$context = _ref2.context,\n        context = _ref2$context === void 0 ? \"The provided value\" : _ref2$context;\n\n    if (obj !== undefined && typeof obj !== \"object\" && typeof obj !== \"function\") {\n      throw new TypeError(\"\".concat(context, \" is not an object.\"));\n    }\n\n    var ret = Object.create(null);\n    module.exports.convertInherit(obj, ret, {\n      context: context\n    });\n    return ret;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}