{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar impl = utils.implSymbol;\n\nvar HTMLElement = require(\"./HTMLElement.js\");\n\nvar HTMLTableCellElement =\n/*#__PURE__*/\nfunction (_HTMLElement$interfac) {\n  _inherits(HTMLTableCellElement, _HTMLElement$interfac);\n\n  function HTMLTableCellElement() {\n    var _this;\n\n    _classCallCheck(this, HTMLTableCellElement);\n\n    throw new TypeError(\"Illegal constructor\");\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(HTMLTableCellElement, [{\n    key: \"colSpan\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"colSpan\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"unsigned long\"](V, {\n        context: \"Failed to set the 'colSpan' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this[impl][\"colSpan\"] = V;\n    }\n  }, {\n    key: \"rowSpan\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"rowSpan\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"unsigned long\"](V, {\n        context: \"Failed to set the 'rowSpan' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this[impl][\"rowSpan\"] = V;\n    }\n  }, {\n    key: \"headers\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"headers\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'headers' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this.setAttribute(\"headers\", V);\n    }\n  }, {\n    key: \"cellIndex\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"cellIndex\"];\n    }\n  }, {\n    key: \"scope\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl][\"scope\"];\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'scope' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this[impl][\"scope\"] = V;\n    }\n  }, {\n    key: \"abbr\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"abbr\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'abbr' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this.setAttribute(\"abbr\", V);\n    }\n  }, {\n    key: \"align\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"align\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'align' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this.setAttribute(\"align\", V);\n    }\n  }, {\n    key: \"axis\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"axis\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'axis' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this.setAttribute(\"axis\", V);\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"height\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'height' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this.setAttribute(\"height\", V);\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"width\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'width' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this.setAttribute(\"width\", V);\n    }\n  }, {\n    key: \"ch\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"char\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'ch' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this.setAttribute(\"char\", V);\n    }\n  }, {\n    key: \"chOff\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"charoff\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'chOff' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this.setAttribute(\"charoff\", V);\n    }\n  }, {\n    key: \"noWrap\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this.hasAttribute(\"noWrap\");\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"boolean\"](V, {\n        context: \"Failed to set the 'noWrap' property on 'HTMLTableCellElement': The provided value\"\n      });\n\n      if (V) {\n        this.setAttribute(\"noWrap\", \"\");\n      } else {\n        this.removeAttribute(\"noWrap\");\n      }\n    }\n  }, {\n    key: \"vAlign\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"vAlign\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'vAlign' property on 'HTMLTableCellElement': The provided value\"\n      });\n      this.setAttribute(\"vAlign\", V);\n    }\n  }, {\n    key: \"bgColor\",\n    get: function get() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      var value = this.getAttribute(\"bgColor\");\n      return value === null ? \"\" : value;\n    },\n    set: function set(V) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'bgColor' property on 'HTMLTableCellElement': The provided value\",\n        treatNullAsEmptyString: true\n      });\n      this.setAttribute(\"bgColor\", V);\n    }\n  }]);\n\n  return HTMLTableCellElement;\n}(HTMLElement.interface);\n\nObject.defineProperties(HTMLTableCellElement.prototype, _defineProperty({\n  colSpan: {\n    enumerable: true\n  },\n  rowSpan: {\n    enumerable: true\n  },\n  headers: {\n    enumerable: true\n  },\n  cellIndex: {\n    enumerable: true\n  },\n  scope: {\n    enumerable: true\n  },\n  abbr: {\n    enumerable: true\n  },\n  align: {\n    enumerable: true\n  },\n  axis: {\n    enumerable: true\n  },\n  height: {\n    enumerable: true\n  },\n  width: {\n    enumerable: true\n  },\n  ch: {\n    enumerable: true\n  },\n  chOff: {\n    enumerable: true\n  },\n  noWrap: {\n    enumerable: true\n  },\n  vAlign: {\n    enumerable: true\n  },\n  bgColor: {\n    enumerable: true\n  }\n}, Symbol.toStringTag, {\n  value: \"HTMLTableCellElement\",\n  configurable: true\n}));\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLTableCellElement'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(HTMLTableCellElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(HTMLTableCellElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: HTMLTableCellElement,\n  expose: {\n    Window: {\n      HTMLTableCellElement: HTMLTableCellElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../nodes/HTMLTableCellElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}