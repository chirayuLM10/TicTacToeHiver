{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/admin/Downloads/tictactoe-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar ElementImpl = require(\"./Element-impl\").implementation;\n\nvar MouseEvent = require(\"../generated/MouseEvent\");\n\nvar ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\n\nvar GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\n\nvar HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\n\nvar _require2 = require(\"../helpers/traversal\"),\n    firstChildWithLocalName = _require2.firstChildWithLocalName;\n\nvar _require3 = require(\"../helpers/form-controls\"),\n    isDisabled = _require3.isDisabled;\n\nvar _require4 = require(\"../helpers/events\"),\n    fireAnEvent = _require4.fireAnEvent;\n\nvar HTMLElementImpl =\n/*#__PURE__*/\nfunction (_ElementImpl) {\n  _inherits(HTMLElementImpl, _ElementImpl);\n\n  function HTMLElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLElementImpl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLElementImpl).call(this, args, privateData));\n\n    _this._initHTMLAndSVGElement();\n\n    _this._initElementCSSInlineStyle();\n\n    _this._initGlobalEvents();\n\n    _this._settingCssText = false;\n    _this._clickInProgress = false; // <summary> uses HTMLElement and has activation behavior\n\n    _this._hasActivationBehavior = _this._localName === \"summary\";\n    return _this;\n  }\n\n  _createClass(HTMLElementImpl, [{\n    key: \"_activationBehavior\",\n    value: function _activationBehavior() {\n      var parent = this.parentNode;\n\n      if (parent && parent._localName === \"details\" && this === firstChildWithLocalName(parent, \"summary\")) {\n        parent.toggleAttribute(\"open\");\n      }\n    }\n  }, {\n    key: \"click\",\n    value: function click() {\n      // https://html.spec.whatwg.org/multipage/interaction.html#dom-click\n      // https://html.spec.whatwg.org/multipage/interaction.html#run-synthetic-click-activation-steps\n      // Not completely spec compliant due to e.g. incomplete implementations of disabled for form controls, or no\n      // implementation at all of isTrusted.\n      if (this._clickInProgress) {\n        return;\n      }\n\n      this._clickInProgress = true;\n\n      if (isDisabled(this)) {\n        return;\n      } // Run synthetic click activation steps. According to the spec,\n      // this should not be calling dispatchEvent, but it matches browser behavior.\n      // See: https://www.w3.org/Bugs/Public/show_bug.cgi?id=12230\n      // See also: https://github.com/whatwg/html/issues/805\n\n\n      fireAnEvent(\"click\", this, MouseEvent, {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        view: this.ownerDocument.defaultView,\n        isTrusted: false\n      });\n      this._clickInProgress = false;\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n        this._settingCssText = true;\n        this._style.cssText = value;\n        this._settingCssText = false;\n      } else if (name.startsWith(\"on\")) {\n        this._globalEventChanged(name.substring(2));\n      }\n\n      _get(_getPrototypeOf(HTMLElementImpl.prototype), \"_attrModified\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"draggable\",\n    get: function get() {\n      var attributeValue = this.getAttribute(\"draggable\");\n\n      if (attributeValue === \"true\") {\n        return true;\n      } else if (attributeValue === \"false\") {\n        return false;\n      }\n\n      return this._localName === \"img\" || this._localName === \"a\" && this.hasAttribute(\"href\");\n    },\n    set: function set(value) {\n      this.setAttribute(\"draggable\", String(value));\n    }\n  }, {\n    key: \"dir\",\n    get: function get() {\n      var dirValue = this.getAttribute(\"dir\");\n\n      if (dirValue !== null) {\n        dirValue = dirValue.toLowerCase();\n\n        if ([\"ltr\", \"rtl\", \"auto\"].includes(dirValue)) {\n          return dirValue;\n        }\n      }\n\n      return \"\";\n    },\n    set: function set(value) {\n      this.setAttribute(\"dir\", value);\n    }\n  }, {\n    key: \"offsetParent\",\n    get: function get() {\n      return null;\n    }\n  }, {\n    key: \"offsetTop\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"offsetLeft\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"offsetWidth\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"offsetHeight\",\n    get: function get() {\n      return 0;\n    }\n  }]);\n\n  return HTMLElementImpl;\n}(ElementImpl);\n\nmixin(HTMLElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(HTMLElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(HTMLElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\nmodule.exports = {\n  implementation: HTMLElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}